[{"/home/ahsan/REACT APPS/wahnilogin/src/App.js":"1","/home/ahsan/REACT APPS/wahnilogin/src/components/Registration/myAccount.js":"2","/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/quizPlay.js":"3","/home/ahsan/REACT APPS/wahnilogin/src/components/Ranking/rankingScreen.js":"4","/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/questionCard.js":"5","/home/ahsan/REACT APPS/wahnilogin/src/components/Profile/profile.js":"6","/home/ahsan/REACT APPS/wahnilogin/src/reportWebVitals.js":"7","/home/ahsan/REACT APPS/wahnilogin/src/components/context/questionsContext.js":"8","/home/ahsan/REACT APPS/wahnilogin/src/components/footer/footer.js":"9","/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/loader.js":"10","/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/whiteLink.js":"11","/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/quizScreen.js":"12","/home/ahsan/REACT APPS/wahnilogin/src/components/context/user1Context.js":"13","/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/questionCardGlobal.js":"14","/home/ahsan/REACT APPS/wahnilogin/src/index.js":"15","/home/ahsan/REACT APPS/wahnilogin/src/components/context/adminQcontext.js":"16","/home/ahsan/REACT APPS/wahnilogin/src/components/questionsScreen/addDelQs.js":"17","/home/ahsan/REACT APPS/wahnilogin/src/firebase.js":"18","/home/ahsan/REACT APPS/wahnilogin/src/components/questionsScreen/showQuestions.js":"19","/home/ahsan/REACT APPS/wahnilogin/src/components/Layout/navbar.js":"20","/home/ahsan/REACT APPS/wahnilogin/src/components/home.js":"21"},{"size":1538,"mtime":1610172591518,"results":"22","hashOfConfig":"23"},{"size":7902,"mtime":1610339699985,"results":"24","hashOfConfig":"23"},{"size":4492,"mtime":1610339670404,"results":"25","hashOfConfig":"23"},{"size":10046,"mtime":1610339685068,"results":"26","hashOfConfig":"23"},{"size":10791,"mtime":1610452871187,"results":"27","hashOfConfig":"23"},{"size":8563,"mtime":1610368830845,"results":"28","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"23"},{"size":4303,"mtime":1608131218727,"results":"30","hashOfConfig":"23"},{"size":875,"mtime":1608642097608,"results":"31","hashOfConfig":"23"},{"size":305,"mtime":1608799122758,"results":"32","hashOfConfig":"23"},{"size":385,"mtime":1609172644871,"results":"33","hashOfConfig":"23"},{"size":2106,"mtime":1610274874722,"results":"34","hashOfConfig":"23"},{"size":3221,"mtime":1610339236269,"results":"35","hashOfConfig":"23"},{"size":2091,"mtime":1609235597549,"results":"36","hashOfConfig":"23"},{"size":500,"mtime":499162500000,"results":"37","hashOfConfig":"23"},{"size":1186,"mtime":1609329068700,"results":"38","hashOfConfig":"23"},{"size":9443,"mtime":1610453070504,"results":"39","hashOfConfig":"23"},{"size":574,"mtime":1608140162817,"results":"40","hashOfConfig":"23"},{"size":5062,"mtime":1610450440841,"results":"41","hashOfConfig":"23"},{"size":398,"mtime":1610172595655,"results":"42","hashOfConfig":"23"},{"size":7466,"mtime":1609346915720,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"1of4z6f",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"69"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},"/home/ahsan/REACT APPS/wahnilogin/src/App.js",["103","104"],"import MyAccount from './components/Registration/myAccount'\nimport { BrowserRouter, Switch, Route, HashRouter } from 'react-router-dom';\nimport Navbar from './components/Layout/navbar'\nimport Home from './components/home'\nimport QuizPlay from './components/Quiz/quizPlay'\nimport Quiz from './components/Quiz/quizScreen'\nimport RankingScreen from './components/Ranking/rankingScreen'\nimport { UserContextProvider } from './components/context/user1Context';\nimport { QuestionContextProvider } from './components/context/questionsContext';\nimport { AdminQuestionContextProvider } from './components/context/adminQcontext'\nimport AddDel from './components/questionsScreen/addDelQs'\nimport './components/styles/globalStyles.css'\nimport Footer from './components/footer/footer'\n\n\n\n\nfunction App() {\n  return (\n    \n    <HashRouter>\n      <Navbar />\n      <Switch>\n      <UserContextProvider>\n        {/* <Route exact path='/' component={Home} /> */}\n          <Route exact path='/' component={MyAccount} />\n          <Route exact path='/Quiz' component={Quiz} />\n\n          <QuestionContextProvider>\n          <Route exact path='/Quiz/play' component={QuizPlay} />\n\n          <AdminQuestionContextProvider>\n          <Route exact path='/Quiz/add' component={AddDel} />\n          </AdminQuestionContextProvider>\n          \n          </QuestionContextProvider>\n\n          <Route exact path='/Quiz/ranking' component={RankingScreen} />\n        </UserContextProvider>\n      </Switch>\n      <Footer />\n    </HashRouter>\n\n  );\n}\n\nexport default App;\n",["105","106"],"/home/ahsan/REACT APPS/wahnilogin/src/components/Registration/myAccount.js",[],["107","108"],"/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/quizPlay.js",["109","110","111","112","113","114"],"import { Redirect, Link } from \"react-router-dom\";\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport { UserContext } from \"../context/user1Context\";\r\nimport \"./quizScreen.css\";\r\nimport QuestionCard from \"./questionCard\";\r\nimport Loader from \"../../globalComponents/loader\";\r\nimport firebase from \"../../firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Home() {\r\n  const uniqueRandom = require(\"unique-random\");\r\n  function random(range) {\r\n    return uniqueRandom(1, range);\r\n  }\r\n  // user details and scores\r\n  const userContextObject = useContext(UserContext);\r\n  const user = userContextObject.user;\r\n  const userScores = userContextObject.userScores;\r\n  const userScoresLoading = userContextObject.userScoresLoading;\r\n  const userDetailsLoading = userContextObject.userDetailsLoading;\r\n  // shuffled questions\r\n  const [questions, setQuestions] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  // useHistory hook to redirect to '/Quiz' on login if registration is complete\r\n  const history = useHistory();\r\n\r\n  function getRandomNumber(min, max) {\r\n    return Math.ceil(Math.random() * (max - min) + min);\r\n  }\r\n\r\n  async function getQuestionsFromFirestore() {\r\n    // fetch the last added question doc from firestore\r\n    // console.log(\"started getting 1st document\");\r\n    firebase\r\n      .firestore()\r\n      .collection(\"questions\")\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .get()\r\n      .then((docData) => {\r\n        const list1 = [];\r\n        docData.forEach((doc) => {\r\n          list1.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        // \r\n        const randomNumber = uniqueRandom(1, list1.length - 1);\r\n        const randomQuestionNumberArray = [\r\n          randomNumber(),\r\n          randomNumber(),\r\n          randomNumber(),\r\n          randomNumber(),\r\n          randomNumber(),\r\n          randomNumber(),\r\n          randomNumber(),\r\n          randomNumber(),\r\n          randomNumber(),\r\n          randomNumber(),\r\n        ];\r\n        const randomQuestionsArray = [];\r\n\r\n        if (list1.length >= 10) {\r\n          for (let i = 0; i < randomQuestionNumberArray.length; i++) {\r\n            \r\n            randomQuestionsArray.push(list1[randomQuestionNumberArray[i]]);\r\n          }\r\n\r\n          setQuestions(randomQuestionsArray);\r\n          setIsLoading(false);\r\n        } else {\r\n          history.push(\"/Quiz\");\r\n          window.alert(\"Not enough questions\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        window.alert(\"Unable to Reach backend\", err);\r\n        history.push(\"/Quiz\");\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(user && user.loggedIn) {\r\n      setIsLoading(true);\r\n    getQuestionsFromFirestore();\r\n    }\r\n  }, []);\r\n\r\n  // question Index to be shown to the user\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  // calculate scores=\r\n  const [score, setScore] = useState(0);\r\n  // when timeOut or onSubmit the score is shown (showscore set to true)\r\n  const [showScore, setShowScore] = useState(false);\r\n\r\n  // fetch score hsitory of user from backend to send both score and percentage increase to backend for rankings\r\n\r\n  function nextQ(nextQuestion) {\r\n    setCurrentQuestion(nextQuestion);\r\n\r\n    // const nextQuestion = currentQuestion + 1;\r\n    // if (nextQuestion < questions.length) {\r\n    // }\r\n  }\r\n\r\n  function submitQ(score) {\r\n    setScore(score);\r\n    setShowScore(true);\r\n\r\n    // score with user id is sent to backEnd to store with new Date()\r\n  }\r\n\r\n  // if there is no user logged in this is redirected to myAccount for login or register\r\n  if (!user || !user.loggedIn) return <Redirect to=\"/\" />;\r\n  if (user && (user.name === null || user.name === undefined || user.name === '')) return <Redirect to=\"/\" />;\r\n\r\n  if (user && !isLoading && !userScoresLoading && !userDetailsLoading) {\r\n    return (\r\n      <div className=\"body\">\r\n        <div className=\"questionDiv\">\r\n          <QuestionCard\r\n            currentQuestion={currentQuestion}\r\n            nextQ={nextQ}\r\n            submitQ={submitQ}\r\n            questions={questions}\r\n            user={user}\r\n            userScores={userScores}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (\r\n    (user && isLoading) ||\r\n    (user && userScoresLoading) ||\r\n    (user && userDetailsLoading)\r\n  ) {\r\n    return (\r\n      <div className=\"flexCenter body\">\r\n        <Loader borderWidth=\"5px\" width=\"50px\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n",["115","116"],"/home/ahsan/REACT APPS/wahnilogin/src/components/Ranking/rankingScreen.js",["117","118","119","120","121"],"/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/questionCard.js",["122","123","124","125","126"],"/home/ahsan/REACT APPS/wahnilogin/src/components/Profile/profile.js",["127"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { UserContext } from \"../context/user1Context\";\r\nimport WhiteLink from '../../globalComponents/whiteLink';\r\nimport firebase from '../../firebase'\r\nimport Loader from \"../../globalComponents/loader\";\r\n\r\nimport editIcon from '../../assets/edit-white-icon.png';\r\nimport logoutIcon from '../../assets/logout-white-icon.png'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Profile(props) {\r\n  // user details and scores\r\n  const userContextObject = useContext(UserContext);\r\n  const user = userContextObject.user;\r\n  const userScores = userContextObject.userScores;\r\n  const userDetails = userContextObject.userDetails;\r\n  const userDetailsLoading = userContextObject.userDetailsLoading;\r\n  // profileUpdateIsLoading\r\n  const [profileUpdateIsLoading, setprofileUpdateIsLoading] = useState(false)\r\n  // inputs\r\n  const [professionInput, setprofessionInput] = useState('')\r\n  const [addressInput, setaddressInput] = useState('')\r\n\r\n  \r\n  // complete profile\r\nconst [completeProfileClicked, setcompleteProfileClicked] = useState(false)\r\n  useEffect(() => {\r\n    if(user && !userDetailsLoading && (userDetails !== undefined)) {\r\n      if ((userDetails.address !== null) && (userDetails.address !== undefined)) {\r\n        setaddressInput(userDetails.address);\r\n      setprofessionInput(userDetails.profession)\r\n      }\r\n    }\r\n  }, [userDetailsLoading]);\r\n\r\n  const username = () => {\r\n    \r\n    if (user.name === null || user.name === undefined || user.name === '') {\r\n      \r\n      return (\r\n        <p style={{ fontSize: \"24px\" }}>\r\n        <b>Guest</b>\r\n        </p>\r\n      )\r\n    }\r\n    else {\r\n      const usernameLength=user.name.length;\r\n      const userNameAt12 = () => {\r\n        if (usernameLength > 12) {\r\n          return user.name.substring(0, 12) + '.'\r\n        } else {\r\n          return user.name\r\n        }\r\n      }\r\n      const splitUsername = userNameAt12().split(' ');\r\n\r\n      const firstName = splitUsername[0];\r\n      const secondName = () => {\r\n        if ((firstName.length < 12) && splitUsername[1]) {\r\n          if (splitUsername[1].length > (12- firstName.length)) {\r\n            return splitUsername[1].substring(0,12-firstName.length) + '.'\r\n          } else {\r\n            return splitUsername[1].substring(0,12-firstName.length)\r\n          }\r\n        } else {\r\n          return ''\r\n        }\r\n      }\r\n      \r\n      return (\r\n        <p style={{ fontSize: \"24px\" }}>\r\n        {firstName}<b> {secondName()}</b>\r\n        </p>\r\n      )\r\n    }\r\n  };\r\n  const numberOfTries = () => {\r\n    if(userScores !== null && userScores !== undefined && (userScores.length > 0)) {\r\n      return  userScores[0].attempt\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n  const highScore = () => {\r\n    if(userDetails !== null && userDetails !== undefined) {\r\n      if ((userDetails.highestScore !== null) || (userDetails.highestScore !== undefined)) {\r\n        return userDetails.highestScore\r\n      } else {\r\n        return 0\r\n      }\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  function onEditNameClick() {\r\n    var newName = window.prompt(\"Enter your new name\", user.name);\r\n    if(newName === null) {\r\n      return;\r\n    }\r\n    else if (newName !== user.name) {\r\n      setprofileUpdateIsLoading(true)\r\n      firebase\r\n          .auth()\r\n          .currentUser\r\n          .updateProfile({\r\n            displayName: newName\r\n          })\r\n          .then(res => {\r\n            window.alert('Your Profile has been Updated')\r\n            setprofileUpdateIsLoading(false)\r\n            window.location.reload();\r\n\r\n          })\r\n          .catch(err => {\r\n            window.alert('Unable to update', err)\r\n            setprofileUpdateIsLoading(false)\r\n          });\r\n        }\r\n    \r\n  }\r\n\r\n  function logout() {\r\n    //on log out click inside <Profile />\r\n      firebase.auth().signOut();\r\n    }\r\n\r\n  function onCompleteProfileClicked() {\r\n    if(completeProfileClicked) {\r\n      setcompleteProfileClicked(false)\r\n    } else {\r\n      setcompleteProfileClicked(true)\r\n    }\r\n  }\r\n\r\n  const updateORview = () => {\r\n    if (completeProfileClicked) {\r\n      return 'View'\r\n    } else {\r\n      return 'Update'\r\n    }\r\n  }\r\n\r\n  function updateProfile() {\r\n    if(profileUpdateIsLoading) {\r\n      window.alert('Updation in progress')\r\n    } else {\r\n      if (addressInput !== '' && professionInput !== '') {\r\n        if (addressInput !== userDetails.address || professionInput !== userDetails.profession) {\r\n          setprofileUpdateIsLoading(true)\r\n          firebase\r\n          .firestore()\r\n          .doc(`users/${user.id}`)\r\n          .update({\r\n            'address': addressInput,\r\n            'profession' : professionInput,\r\n          })\r\n          .then(res => {\r\n            window.alert('Your profile has been Updated');\r\n            setprofileUpdateIsLoading(false)\r\n            setcompleteProfileClicked(false)\r\n          })\r\n          .catch(err => {\r\n            window.alert('Coudnot update your profile', err);\r\n            setprofileUpdateIsLoading(false)\r\n            setcompleteProfileClicked(false)\r\n          })\r\n        } else {\r\n          window.alert('No changes detected')\r\n        }\r\n      } else {\r\n        window.alert('Both fields cannot be empty')\r\n      }\r\n    }\r\n  }\r\n  //check if user object has a name\r\n  //if NO name, complete registration form is shown else Profile is shown\r\n\r\n  return (\r\n    <div className=\"body fontMontserrat\">\r\n      <div className=\"cardOne wahniBgColor flexCenter\" id=\"profileHeight\">\r\n        {\r\n          completeProfileClicked ? \r\n          null\r\n          :\r\n          <div className=\"profileBoxes profileBox1\">\r\n          <div>\r\n          {username()}\r\n          </div>\r\n          <div className='editButtonContainer'>\r\n          <img onClick={() => onEditNameClick()} src={editIcon} alt=\"Edit Name\" />\r\n          </div>\r\n          <div>\r\n          <p id=\"phoneNumber\">{user.number}</p>\r\n          </div>\r\n        </div>\r\n        }\r\n\r\n        {\r\n          completeProfileClicked ? \r\n          \r\n          <div className='completeProfileInputContain'>\r\n            <div className=\"numberInputContainer\">\r\n          <p>Profession <b>or Qualification</b></p>\r\n          <input\r\n            className=\"numberInput fontMontserrat\"\r\n            value={professionInput}\r\n            onChange={(e) => setprofessionInput(e.target.value)}\r\n            // type=\"number\"\r\n            placeholder='e.g. Student / B.Tech'\r\n            name=\"mobile\"\r\n            required={true}\r\n          />\r\n        </div>\r\n        <div style={{marginTop: '8px'}} className=\"numberInputContainer\">\r\n          <p>Your <b>Address</b></p>\r\n          <input\r\n            className=\"numberInput fontMontserrat\"\r\n            value={addressInput}\r\n            onChange={(e) => setaddressInput(e.target.value)}\r\n            // type=\"number\"\r\n            placeholder='e.g. Kechery, Thrissur - P.O 680519'\r\n            name=\"mobile\"\r\n            required={true}\r\n          />\r\n        </div>\r\n        <div onClick={() => updateProfile()} className='updateProfileButton wahniColor'>\r\n        {\r\n          profileUpdateIsLoading ? \r\n          <Loader borderWidth='3px' width='10px'/>\r\n          :\r\n          <p><b>Update</b> Profile</p>\r\n        }\r\n        {/* <img onClick={() => onEditNameClick()} src='https://www.iconsdb.com/icons/preview/white/save-as-xxl.png' alt=\"\" /> */}\r\n        </div>\r\n          </div>\r\n\r\n          :\r\n\r\n          <div className=\"profileBoxes profileBox2\">\r\n          <div className=\"profileBox2singleRow\">\r\n            <p>\r\n              Number of <b>Tries</b>\r\n            </p>\r\n            <p>\r\n              <b>{numberOfTries()}</b>\r\n            </p>\r\n          </div>\r\n          <div className=\"profileBox2singleRow\">\r\n            <p>\r\n              High<b>score</b>\r\n            </p>\r\n            <p>\r\n              <b>{highScore()}</b>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        }\r\n        <img className='logOutIcon' onClick={() => logout()} src={logoutIcon} alt=\"Logout\" />\r\n      </div>\r\n      <WhiteLink onClick={() => onCompleteProfileClicked(true)}>\r\n        <b>{updateORview()}</b> Your Profile\r\n      </WhiteLink>\r\n      <div onClick={props.onClick} className='linkContainer'>\r\n      <div\r\n        className=\"linkContain wahniColor\"\r\n      >\r\n          <Link to='/Quiz' className='flexContainFull linkToQuiz link wahniColor'>\r\n          <p style={{ paddingLeft: \"25px\"}}>\r\n          <b>Go to</b> Quiz</p>\r\n        </Link>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","/home/ahsan/REACT APPS/wahnilogin/src/reportWebVitals.js",[],"/home/ahsan/REACT APPS/wahnilogin/src/components/context/questionsContext.js",["128","129","130","131"],"import React, { useContext, useEffect, useCallback, useState } from 'react';\n\n\nexport const QuestionContext = React.createContext({});\n\nconst QuestionProvider = QuestionContext.Provider;\nconst QuestionConsumer = QuestionContext.Consumer;\n\n// function onAuthStateChange(callback) {\n// make sure user register or login\n// }\n\n  // user is added or logged in and sent to all the components of this site through this context\n\n\nexport function QuestionContextProvider(props) {\n\n\n    // on useEffect fetch questions from the backend and save it in 'qs'\n\n    const [qs, setqs] = useState([\n            {\n                questionText: 'What is the capital of France?',\n                answerOptions: [\n                    { answerText: 'New York', isCorrect: false },\n                    { answerText: 'London', isCorrect: false },\n                    { answerText: 'Paris', isCorrect: true },\n                    { answerText: 'Dublin', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'Who is CEO of Tesla?',\n                answerOptions: [\n                    { answerText: 'Jeff Bezos', isCorrect: false },\n                    { answerText: 'Elon Musk', isCorrect: true },\n                    { answerText: 'Bill Gates', isCorrect: false },\n                    { answerText: 'Tony Stark', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'The iPhone was created by which company?',\n                answerOptions: [\n                    { answerText: 'Apple', isCorrect: true },\n                    { answerText: 'Intel', isCorrect: false },\n                    { answerText: 'Amazon', isCorrect: false },\n                    { answerText: 'Microsoft', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'How many Harry Potter books are there?',\n                answerOptions: [\n                    { answerText: '1', isCorrect: false },\n                    { answerText: '4', isCorrect: false },\n                    { answerText: '6', isCorrect: false },\n                    { answerText: '7', isCorrect: true },\n                ],\n            },\n            {\n                questionText: 'How many Harry Potter books are there?',\n                answerOptions: [\n                    { answerText: '1', isCorrect: false },\n                    { answerText: '4', isCorrect: false },\n                    { answerText: '6', isCorrect: false },\n                    { answerText: '7', isCorrect: true },\n                ],\n            },\n            {\n                questionText: 'What is the capital of France?',\n                answerOptions: [\n                    { answerText: 'New York', isCorrect: false },\n                    { answerText: 'London', isCorrect: false },\n                    { answerText: 'Paris', isCorrect: true },\n                    { answerText: 'Dublin', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'Who is CEO of Tesla?',\n                answerOptions: [\n                    { answerText: 'Jeff Bezos', isCorrect: false },\n                    { answerText: 'Elon Musk', isCorrect: true },\n                    { answerText: 'Bill Gates', isCorrect: false },\n                    { answerText: 'Tony Stark', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'The iPhone was created by which company?',\n                answerOptions: [\n                    { answerText: 'Apple', isCorrect: true },\n                    { answerText: 'Intel', isCorrect: false },\n                    { answerText: 'Amazon', isCorrect: false },\n                    { answerText: 'Microsoft', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'How many Harry Potter books are there?',\n                answerOptions: [\n                    { answerText: '1', isCorrect: false },\n                    { answerText: '4', isCorrect: false },\n                    { answerText: '6', isCorrect: false },\n                    { answerText: '7', isCorrect: true },\n                ],\n            },\n    ])\n  \n  return (\n    <QuestionProvider value={[qs, setqs]}>\n    {props.children}      \n    </QuestionProvider>\n  );\n}\n\n","/home/ahsan/REACT APPS/wahnilogin/src/components/footer/footer.js",[],["132","133"],"/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/loader.js",["134","135"],"import React, { useState, useContext} from 'react';\nimport './loader.css'\n\nfunction Loader(props) {\n\n    const { width, borderWidth } = props\n\n    return (\n        \n            <div style={{height: width, width: width, borderWidth: borderWidth}} className=\"loader\"></div>\n    );\n}\n\nexport default Loader;\n",["136","137"],"/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/whiteLink.js",["138","139"],"import React, { useState, useContext } from \"react\";\nimport './whiteLink.css'\n\nfunction WhiteLink(props) {\n  return (\n      <div onClick={props.onClick} className='linkContainer'>\n      <div\n        className=\"linkContain wahniColor\"\n      >\n          <p style={{ paddingLeft: \"25px\"}}>\n        {props.children}\n        </p>\n      </div>\n      </div>\n  );\n}\n\nexport default WhiteLink;\n","/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/quizScreen.js",[],"/home/ahsan/REACT APPS/wahnilogin/src/components/context/user1Context.js",["140","141","142","143","144"],"import React, { useContext, useEffect, useCallback, useState } from \"react\";\r\nimport firebase from \"../../firebase\";\r\n\r\nconst defaultUser = { loggedIn: false, email: \"\" };\r\nexport const UserContext = React.createContext({});\r\n\r\nconst UserProvider = UserContext.Provider;\r\nconst UserConsumer = UserContext.Consumer;\r\n\r\n// function onAuthStateChange(callback) {\r\n// make sure user register or login\r\n// }\r\n\r\n// user is added or logged in and sent to all the components of this site through this context\r\n\r\nexport function UserContextProvider(props) {\r\n  const [user, setUser] = useState({ loggedIn: false });\r\n  const [userScores, setUserScores] = useState(null);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  // loading\r\n  const [userLoading, setuserLoading] = useState(true);\r\n  const [userScoresLoading, setuserScoresLoading] = useState(false);\r\n  const [userDetailsLoading, setuserDetailsLoading] = useState(false);\r\n\r\n  function onAuthStateChange() {\r\n    setuserLoading(true);\r\n    setuserDetailsLoading(true);\r\n    setuserScoresLoading(true);\r\n\r\n    return firebase.auth().onAuthStateChanged((user1) => {\r\n      if (user1) {\r\n        setUser({\r\n          loggedIn: true,\r\n          email: user1.email,\r\n          name: user1.displayName,\r\n          id: user1.uid,\r\n          number: user1.phoneNumber,\r\n          photoURL: user1.photoURL,\r\n        });\r\n\r\n        setuserLoading(false);\r\n\r\n        firebase\r\n          .firestore()\r\n          .collection(`rankings`)\r\n          .where(\"uid\", \"==\", user1.uid)\r\n          .orderBy(\"attendedAt\", \"desc\")\r\n          .limit(1)\r\n          .onSnapshot(\r\n            (thisisquery) => {\r\n              const list = [];\r\n              thisisquery.forEach((doc) => {\r\n                list.push({ ...doc.data(), id: doc.id });\r\n              });\r\n              setUserScores(list);\r\n              setuserScoresLoading(false);\r\n            },\r\n            (err) => {\r\n              userScoresLoading(false);\r\n            }\r\n          );\r\n        // get user details\r\n        firebase\r\n          .firestore()\r\n          .doc(`users/${user1.uid}`)\r\n          .onSnapshot(\r\n            (docData) => {\r\n              const list = docData.data();\r\n              setUserDetails(list);\r\n              setuserDetailsLoading(false);\r\n            },\r\n            (err) => {\r\n              setuserDetailsLoading(false);\r\n            }\r\n          );\r\n      } else {\r\n        setUser({ loggedIn: false });\r\n        setUserScores(null);\r\n        setUserDetails(null);\r\n        setuserLoading(false);\r\n        setuserDetailsLoading(false);\r\n        setuserScoresLoading(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  // on useEffect user is authorized and user details are set and sent via context API to all components\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChange();\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <UserProvider\r\n      value={{\r\n        user: user,\r\n        userScores: userScores,\r\n        userDetails: userDetails,\r\n        userLoading: userLoading,\r\n        userScoresLoading: userScoresLoading,\r\n        userDetailsLoading: userDetailsLoading,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </UserProvider>\r\n  );\r\n}\r\n","/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/questionCardGlobal.js",["145"],"import React, { useState, useEffect, useReducer} from 'react';\nimport './questionCardGlobal.css'\n\nfunction QuestionCardGlobal(props) {\n    const [Hello, setHello] = useState(false);\n    \n    \n\n    const {question, clickToSeeAnswer, answer, index} = props;\n   \n    useEffect(() => {\n        console.log('rendered')\n        // idNameBasedOnAnswer()\n    }, [question])\n\n    function clickToSeeAnswer1() {\n        clickToSeeAnswer(question.id, index);\n        // forceUpdate;\n        if(Hello) {\n            setHello(false)\n        } else {\n            setHello(true)\n        }\n    }\n\n\n    useEffect(() => {\n        console.log('hello')\n    }, [question])\n\n\n    const idNameBasedOnAnswer = (option) => {\n        if (option === answer) {\n            return 'answerButton2'\n        } else {\n            return 'answerButton1'\n        }\n    }\n\n    return (\n        \n            <div className='questionDiv1'>\n                <div className=\"flexContainFull fontMontserrat\">\n        <div>\n          {/* <div className=\"question-count-timer\">\n            <span className=\"question-count\">#{currentQuestion + 1}</span>\n\n            <div className=\"timer\">\n              <div>{duration}</div>\n            </div>\n          </div> */}\n\n          <div className=\"questionHeadText1\">Question</div>\n        </div>\n\n        <div className=\"question-and-answer-section1\">\n          <div className=\"question-text1\">\n            {question.questionText}\n          </div>\n\n          <div className=\"answer-section1 wahniColor\">\n            {question.options.map((option) => (\n              <div\n                className=\"buttonOne\"\n                id={idNameBasedOnAnswer(option)}\n              >\n                {option}\n              </div>\n            ))}\n            <div\n                className=\"buttonOne showAnswerButton\"\n                id='answerButton1'\n                onClick={() => clickToSeeAnswer1()}\n              >\n                Click to See Answer\n              </div>\n          </div>\n          \n        </div>\n\n      </div>\n            </div>\n    );\n}\n\nexport default QuestionCardGlobal;\n","/home/ahsan/REACT APPS/wahnilogin/src/index.js",[],"/home/ahsan/REACT APPS/wahnilogin/src/components/context/adminQcontext.js",["146","147","148"],"import React, { useContext, useEffect, useCallback, useState } from 'react';\nimport firebase from '../../firebase'\n\n\nexport const AdminQuestionContext = React.createContext({});\n\nconst AdminQuestionProvider = AdminQuestionContext.Provider;\nconst AdminQuestionConsumer = AdminQuestionContext.Consumer;\n\n// function onAuthStateChange(callback) {\n// make sure user register or login\n// }\n\n  // user is added or logged in and sent to all the components of this site through this context\n\n\nexport function AdminQuestionContextProvider(props) {\n\n    \n\n    // on useEffect fetch questions from the backend and save it in 'qs'\n\n    const [allQs, setAllQs] = useState([])\n\n    useEffect(() => {\n        firebase.firestore()\n        .collection('questions')\n        .orderBy('createdAt', 'desc')\n        .limit(5)\n        .onSnapshot((thisisquery) => {\n          const list = [];\n          thisisquery.forEach((doc) => {\n            list.push({ ...doc.data(), id: doc.id });\n          })\n          setAllQs(list);\n          // console.log(list)\n        })\n      }, []);\n  \n  return (\n    <AdminQuestionProvider value={[allQs, setAllQs]}>\n    {props.children}\n    </AdminQuestionProvider>\n  );\n}\n\n",["149","150"],"/home/ahsan/REACT APPS/wahnilogin/src/components/questionsScreen/addDelQs.js",["151","152","153","154","155","156"],"/home/ahsan/REACT APPS/wahnilogin/src/firebase.js",[],"/home/ahsan/REACT APPS/wahnilogin/src/components/questionsScreen/showQuestions.js",["157","158","159","160"],"import React, { useState } from 'react';\nimport firebase from '../../firebase';\nimport Loader from '../../globalComponents/loader';\nimport './questionScreen.css';\nimport '../../globalComponents/questionCardGlobal.css';\nimport deleteIcon from '../../assets/delete-white-icon.png';\n\n\nfunction ShowQ(props) {\n\n    const { allQs, setAllQs } = props;\n    const [correctAnswers, setCorrectAnswers] = useState([]);\n    // const [newQs, setnewQs] = useState(AllQs)\n    const [answerIsLoading, setanswerIsLoading] = useState(false)\n\n    \n    function getAnswer(id ,index) {\n      setanswerIsLoading(true)\n      if(correctAnswers[index]) {\n        setanswerIsLoading(false)\n      } else {\n        firebase\n      .firestore()\n      .doc(`answers/${id}`)\n      .get().then((docData => {\n        const answersingle = docData.data().answer;\n        const list = correctAnswers;\n        list[index] = answersingle;\n        // list[index] = answersingle;\n        setCorrectAnswers(list);\n        setanswerIsLoading(false)\n\n\n        // const list = [];\n        // documentSnapshots.forEach((doc) => {\n        //   list.push({ ...doc.data(), id: doc.id });\n        // })\n        // // setCorrectAnswers(prevCorrectAnswer => [...prevFullnotes, ...list]);\n        // setAllQs(prevCorrectAnswer => [...prevCorrectAnswer.slice(0,index), {...prevCorrectAnswer[index], 'answer': list[0].answer}, ...prevCorrectAnswer.slice(index+1,3)]);\n      }))\n      .catch(err => {\n        window.alert('Unable to get Answer')\n        setanswerIsLoading(false)\n      });\n      }\n    }\n\n    function deleteQuestion(id) {\n      firebase\n      .firestore()\n      .doc(`questions/${id}`)\n      .delete()\n      .then(res => alert('Question has been deleted'))\n      .catch(err => alert('Unable to delete question', err));\n      firebase\n      .firestore()\n      .doc(`answers/${id}`)\n      .delete()\n      .then(res => console.log('answer deleted'))\n      .catch(err => alert('Unable to delete answer', err));\n      setCorrectAnswers([])\n    }\n\n    \n  const colorConst = (iscorrect) => {\n      if(iscorrect) {\n          return 'green'\n      } else {\n          return 'black'\n      }\n  }\n  const fontWeightConst = (iscorrect) => {\n    if(iscorrect) {\n        return 'bold'\n    } else {\n        return 'normal'\n    }\n}\n\n\nconst idNameBasedOnAnswer = (option, answer) => {\n  if (option === answer) {\n      return 'answerButton2'\n  } else {\n      return 'answerButton1'\n  }\n}\n\n    function QuestionsView() {\n        return (\n          <div className='questonsSubMainDiv'>\n            {allQs ? (\n              allQs.map((q, i) => (\n                // <div className='insideQuestionsView'>\n                //   {/* <p>Question:</p> */}\n                //     <p style={{fontWeight: 'bold'}}>Q : {q.questionText}</p>\n                //     <AnswersView answers={q.options} />\n                //     The Answer is {q.answer}\n                //     <button onClick={() => getAnswer(q.id, i)}>show answer</button>\n                // </div>\n                // <QuestionCardGlobal clickToSeeAnswer={getAnswer} question={q} answer={q.answer} index={i} />\n                <div className='questionDiv1'>\n                <div className=\"flexContainFull fontMontserrat\">\n        <div>\n\n          <div className=\"questionHeadText1\">Question\n          <img onClick={() => deleteQuestion(q.id)} src={deleteIcon} />\n          </div>\n        </div>\n\n        <div className=\"question-and-answer-section1\">\n          <div className=\"question-text1\">\n            {q.questionText}\n          </div>\n\n          <div className=\"answer-section1 wahniColor\">\n            {q.options.map((option) => (\n              <div\n                className=\"buttonOne\"\n                id={idNameBasedOnAnswer(option, correctAnswers[i])}\n              >\n                {option}\n              </div>\n            ))}\n            {\n              answerIsLoading ? \n              <div\n                  className=\"buttonOne flexCenter\"\n                  id='loadingButton1'\n                >\n                  <Loader width='15px' borderWidth='5px'/>\n                </div>\n              :\n              <div>\n              {\n                correctAnswers[i] ? \n                <div\n                  className=\"buttonOne showAnswerButton\"\n                  id='answerButton1'\n                >\n                  Answer is {correctAnswers[i]}\n                </div>\n                :\n                <div\n                  className=\"buttonOne showAnswerButton\"\n                  id='answerButton1'\n                  onClick={() => getAnswer(q.id, i)}\n                >\n                  Click to See Answer {correctAnswers[i]}\n                </div>\n              }\n              </div>\n            }\n              \n          </div>\n          \n        </div>\n\n      </div>\n            </div>\n              ))\n            ) : (\n              <div></div>\n            )}\n          </div>\n        );\n}\n\n\n    return (\n        <div className='questionsView'>\n        <QuestionsView />\n        <hr />\n        </div>\n        \n    )\n\n}\n\nexport default ShowQ;\n","/home/ahsan/REACT APPS/wahnilogin/src/components/Layout/navbar.js",[],"/home/ahsan/REACT APPS/wahnilogin/src/components/home.js",["161","162","163","164","165","166","167"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { UserContext } from \"./context/user1Context\";\r\nimport Loader from \"../globalComponents/loader\";\r\nimport axios from \"axios\";\r\nimport firebase from '../firebase'\r\n\r\nfunction Home() {\r\n  const [questions, setQuestions] = useState(\"\");\r\n\r\n  const uniqueRandom = require('unique-random');\r\n\r\n  const userContextObject = useContext(UserContext);\r\n\r\n  // function getRandomNumber(min, max) {\r\n  //   return Math.ceil(Math.random() * (max - min) + min);\r\n  // }\r\n\r\n  // async function getQuestionsFromFirestore() {\r\n  //   // fetch the last added question doc from firestore\r\n  //   console.log('started getting 1st document')\r\n  //   firebase\r\n  //     .firestore()\r\n  //     .collection(\"questions\")\r\n  //     .orderBy(\"createdAt\", \"desc\")\r\n  //     .limit(1)\r\n  //     .get()\r\n  //     .then((docData) => {\r\n  //       const list1 = [];\r\n  //       docData.forEach((doc) => {\r\n  //         list1.push({ ...doc.data(), id: doc.id });\r\n  //       });\r\n  //       console.log(`got 1st doc with index : ${list1[0].index}`)\r\n  //       // check if list has an object with index\r\n  //       if (list1.length > 0) {\r\n  //         const totalQuestions = list1[0].index;\r\n\r\n  //         // check if total questions is below 10 or 100 or 1000\r\n  //         const divisibleNumber = () => {\r\n  //           if (totalQuestions < 10) {\r\n  //             return 10;\r\n  //           } else if (totalQuestions < 100) {\r\n  //             return 10;\r\n  //           } else if (totalQuestions < 1000) {\r\n  //             return 100;\r\n  //           } else if (totalQuestions < 10000) {\r\n  //             return 1000;\r\n  //           }\r\n  //         };\r\n  //         console.log(`disvisible number : ${divisibleNumber()}`)\r\n  //         const randomNumbersArrayLength =\r\n  //           Math.floor(totalQuestions / divisibleNumber()) + 1;\r\n\r\n  //         console.log(`randomNumbersArrayLength: ${randomNumbersArrayLength}`)\r\n  //         // get a random number between 1 and random numbers array length\r\n          \r\n  //         const aRandomNumber = getRandomNumber(0.5, randomNumbersArrayLength);\r\n\r\n  //         console.log(`random: ${aRandomNumber}`)\r\n\r\n  //         // based on this random number generated, get questions\r\n  //         if (aRandomNumber < randomNumbersArrayLength) {\r\n  //           console.log(`fetching docs less than multiple of 10`)\r\n  //           firebase\r\n  //             .firestore()\r\n  //             .collection(\"questions\")\r\n  //             .where(\"index\", \"<=\", aRandomNumber * divisibleNumber())\r\n  //             .limit(divisibleNumber())\r\n  //             .get()\r\n  //             .then((docData2) => {\r\n  //               console.log(`number of docs fetched: ${aRandomNumber * divisibleNumber()}`)\r\n  //               const list2 = [];\r\n  //               docData2.forEach((doc) => {\r\n  //                 list2.push({ ...doc.data(), id: doc.id });\r\n  //               });\r\n  //               // randomise list\r\n  //               const randomNumber = uniqueRandom(1, list2.length-1);\r\n  //               const newArray = [randomNumber(), randomNumber(), randomNumber(), randomNumber(), randomNumber()]\r\n  //               const newQuestionsArray = [];\r\n  //               for (let i = 0; i < newArray.length; i++) {\r\n  //                 console.log(`added ${i} questions with index ${newArray[i]}`)\r\n  //                 newQuestionsArray.push(list2[newArray[i]])\r\n  //               }\r\n  //               setQuestions(newQuestionsArray);\r\n  //               // setIsLoading(false);\r\n  //             })\r\n  //             .catch((err) => {\r\n  //               // history.push(\"/Quiz\");\r\n  //               window.alert(\"couldnt fetch questions\");\r\n  //             });\r\n  //         } else {\r\n  //           console.log(`fetching docs after: index ${(aRandomNumber - 1) * divisibleNumber()} `)\r\n  //           firebase\r\n  //             .firestore()\r\n  //             .collection(\"questions\")\r\n  //             .where(\"index\", \">=\", (aRandomNumber - 1) * divisibleNumber())\r\n  //             .limit(divisibleNumber())\r\n  //             .get()\r\n  //             .then((docData3) => {\r\n  //               const list3 = [];\r\n  //               docData3.forEach((doc) => {\r\n  //                 list3.push({ ...doc.data(), id: doc.id });\r\n  //               });\r\n  //               if (list3.length < 5) {\r\n  //                 console.log(`if fetched docs are low : ${list3.length}`)\r\n  //                 firebase\r\n  //                   .firestore()\r\n  //                   .collection(\"questions\")\r\n  //                   .where(\r\n  //                     \"index\",\r\n  //                     \"<\",\r\n  //                     (aRandomNumber - 1) * divisibleNumber()\r\n  //                   )\r\n  //                   .limit(divisibleNumber())\r\n  //                   .get()\r\n  //                   .then((thisisquery1) => {\r\n  //                     thisisquery1.forEach((doc) => {\r\n  //                       list3.push({ ...doc.data(), id: doc.id });\r\n  //                     });\r\n  //                     console.log(`fetched even more docs : ${list3.length}`)\r\n\r\n  //                     // randomise list \r\n  //                     const randomNumber3a = uniqueRandom(1, list3.length -1);\r\n  //               const newArray3a = [randomNumber3a(), randomNumber3a(), randomNumber3a(), randomNumber3a(), randomNumber3a()]\r\n  //               console.log(`randomeNumbers are: ${newArray3a}`)\r\n  //               const newQuestionsArray3a = [];\r\n  //               for (let i = 0; i < newArray3a.length; i++) {\r\n  //                 newQuestionsArray3a.push(list3[newArray3a[i]])\r\n  //               }\r\n  //                     setQuestions(newQuestionsArray3a);\r\n  //                     // setIsLoading(false);\r\n  //                   })\r\n  //                   .catch((err) => {\r\n  //                     // history.push(\"/Quiz\");\r\n  //                     window.alert(\"couldnt fetch questions\");\r\n  //                   });\r\n  //               } else {\r\n  //                 console.log(`if fetched docs are enough : ${list3.length}`)\r\n\r\n  //                 // randomise list\r\n  //               const randomNumber3 = uniqueRandom(1, list3.length-1);\r\n  //               const newArray3 = [randomNumber3(), randomNumber3(), randomNumber3(), randomNumber3(), randomNumber3()]\r\n  //               const newQuestionsArray3 = [];\r\n  //               for (let i = 0; i < newArray3.length; i++) {\r\n  //                 newQuestionsArray3.push(list3[newArray3[i]])\r\n  //               }\r\n  //                 setQuestions(newQuestionsArray3);\r\n  //                 // setIsLoading(false);\r\n  //               }\r\n  //             })\r\n  //             .catch((err) => {\r\n  //               // history.push(\"/Quiz\");\r\n  //               window.alert(\"couldnt fetch questions\");\r\n  //             });\r\n  //         }\r\n  //       }\r\n  //     })\r\n  //     .catch(err => {\r\n  //       window.alert('Unable to Reach backend', err)\r\n  //     });\r\n  // }\r\n\r\n  // useEffect(() => {\r\n  //   // on component load, from the qs, array the questions are shuffled and randomized\r\n  //   getQuestionsFromFirestore();\r\n  // }, []);\r\n\r\n  function clickHandler() {\r\n\r\n    console.log(userContextObject)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>WahniHome</h1>\r\n      <button onClick={() => clickHandler()}>fetch</button>\r\n      {/* <QuestionCardGlobal /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n",{"ruleId":"168","severity":1,"message":"169","line":2,"column":10,"nodeType":"170","messageId":"171","endLine":2,"endColumn":23},{"ruleId":"168","severity":1,"message":"172","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":12},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"173","replacedBy":"177"},{"ruleId":"175","replacedBy":"178"},{"ruleId":"168","severity":1,"message":"179","line":1,"column":20,"nodeType":"170","messageId":"171","endLine":1,"endColumn":24},{"ruleId":"168","severity":1,"message":"180","line":12,"column":12,"nodeType":"170","messageId":"171","endLine":12,"endColumn":18},{"ruleId":"168","severity":1,"message":"181","line":27,"column":12,"nodeType":"170","messageId":"171","endLine":27,"endColumn":27},{"ruleId":"182","severity":1,"message":"183","line":84,"column":6,"nodeType":"184","endLine":84,"endColumn":8,"suggestions":"185"},{"ruleId":"168","severity":1,"message":"186","line":89,"column":10,"nodeType":"170","messageId":"171","endLine":89,"endColumn":15},{"ruleId":"168","severity":1,"message":"187","line":91,"column":10,"nodeType":"170","messageId":"171","endLine":91,"endColumn":19},{"ruleId":"173","replacedBy":"188"},{"ruleId":"175","replacedBy":"189"},{"ruleId":"168","severity":1,"message":"190","line":1,"column":27,"nodeType":"170","messageId":"171","endLine":1,"endColumn":36},{"ruleId":"168","severity":1,"message":"191","line":58,"column":10,"nodeType":"170","messageId":"171","endLine":58,"endColumn":22},{"ruleId":"168","severity":1,"message":"192","line":58,"column":24,"nodeType":"170","messageId":"171","endLine":58,"endColumn":39},{"ruleId":"168","severity":1,"message":"193","line":59,"column":10,"nodeType":"170","messageId":"171","endLine":59,"endColumn":27},{"ruleId":"168","severity":1,"message":"194","line":59,"column":29,"nodeType":"170","messageId":"171","endLine":59,"endColumn":49},{"ruleId":"168","severity":1,"message":"195","line":1,"column":38,"nodeType":"170","messageId":"171","endLine":1,"endColumn":48},{"ruleId":"168","severity":1,"message":"196","line":13,"column":5,"nodeType":"170","messageId":"171","endLine":13,"endColumn":12},{"ruleId":"182","severity":1,"message":"197","line":46,"column":6,"nodeType":"184","endLine":46,"endColumn":16,"suggestions":"198"},{"ruleId":"182","severity":1,"message":"199","line":76,"column":6,"nodeType":"184","endLine":76,"endColumn":8,"suggestions":"200"},{"ruleId":"201","severity":1,"message":"202","line":108,"column":31,"nodeType":"203","messageId":"204","endLine":108,"endColumn":33},{"ruleId":"182","severity":1,"message":"205","line":34,"column":6,"nodeType":"184","endLine":34,"endColumn":26,"suggestions":"206"},{"ruleId":"168","severity":1,"message":"195","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":27},{"ruleId":"168","severity":1,"message":"190","line":1,"column":29,"nodeType":"170","messageId":"171","endLine":1,"endColumn":38},{"ruleId":"168","severity":1,"message":"207","line":1,"column":40,"nodeType":"170","messageId":"171","endLine":1,"endColumn":51},{"ruleId":"168","severity":1,"message":"208","line":7,"column":7,"nodeType":"170","messageId":"171","endLine":7,"endColumn":23},{"ruleId":"173","replacedBy":"209"},{"ruleId":"175","replacedBy":"210"},{"ruleId":"168","severity":1,"message":"211","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":25},{"ruleId":"168","severity":1,"message":"195","line":1,"column":27,"nodeType":"170","messageId":"171","endLine":1,"endColumn":37},{"ruleId":"173","replacedBy":"212"},{"ruleId":"175","replacedBy":"213"},{"ruleId":"168","severity":1,"message":"211","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":25},{"ruleId":"168","severity":1,"message":"195","line":1,"column":27,"nodeType":"170","messageId":"171","endLine":1,"endColumn":37},{"ruleId":"168","severity":1,"message":"195","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":27},{"ruleId":"168","severity":1,"message":"207","line":1,"column":40,"nodeType":"170","messageId":"171","endLine":1,"endColumn":51},{"ruleId":"168","severity":1,"message":"214","line":4,"column":7,"nodeType":"170","messageId":"171","endLine":4,"endColumn":18},{"ruleId":"168","severity":1,"message":"215","line":8,"column":7,"nodeType":"170","messageId":"171","endLine":8,"endColumn":19},{"ruleId":"182","severity":1,"message":"216","line":95,"column":6,"nodeType":"184","endLine":95,"endColumn":8,"suggestions":"217"},{"ruleId":"168","severity":1,"message":"218","line":1,"column":38,"nodeType":"170","messageId":"171","endLine":1,"endColumn":48},{"ruleId":"168","severity":1,"message":"195","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":27},{"ruleId":"168","severity":1,"message":"207","line":1,"column":40,"nodeType":"170","messageId":"171","endLine":1,"endColumn":51},{"ruleId":"168","severity":1,"message":"219","line":8,"column":7,"nodeType":"170","messageId":"171","endLine":8,"endColumn":28},{"ruleId":"173","replacedBy":"220"},{"ruleId":"175","replacedBy":"221"},{"ruleId":"168","severity":1,"message":"211","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":25},{"ruleId":"168","severity":1,"message":"190","line":1,"column":39,"nodeType":"170","messageId":"171","endLine":1,"endColumn":48},{"ruleId":"168","severity":1,"message":"222","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":25},{"ruleId":"168","severity":1,"message":"223","line":139,"column":17,"nodeType":"170","messageId":"171","endLine":139,"endColumn":22},{"ruleId":"168","severity":1,"message":"224","line":140,"column":17,"nodeType":"170","messageId":"171","endLine":140,"endColumn":29},{"ruleId":"168","severity":1,"message":"225","line":144,"column":17,"nodeType":"170","messageId":"171","endLine":144,"endColumn":28},{"ruleId":"168","severity":1,"message":"226","line":11,"column":20,"nodeType":"170","messageId":"171","endLine":11,"endColumn":28},{"ruleId":"168","severity":1,"message":"227","line":65,"column":9,"nodeType":"170","messageId":"171","endLine":65,"endColumn":19},{"ruleId":"168","severity":1,"message":"228","line":72,"column":9,"nodeType":"170","messageId":"171","endLine":72,"endColumn":24},{"ruleId":"229","severity":1,"message":"230","line":107,"column":11,"nodeType":"231","endLine":107,"endColumn":72},{"ruleId":"168","severity":1,"message":"190","line":1,"column":39,"nodeType":"170","messageId":"171","endLine":1,"endColumn":48},{"ruleId":"168","severity":1,"message":"232","line":3,"column":8,"nodeType":"170","messageId":"171","endLine":3,"endColumn":14},{"ruleId":"168","severity":1,"message":"233","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":13},{"ruleId":"168","severity":1,"message":"234","line":5,"column":8,"nodeType":"170","messageId":"171","endLine":5,"endColumn":16},{"ruleId":"168","severity":1,"message":"235","line":8,"column":10,"nodeType":"170","messageId":"171","endLine":8,"endColumn":19},{"ruleId":"168","severity":1,"message":"236","line":8,"column":21,"nodeType":"170","messageId":"171","endLine":8,"endColumn":33},{"ruleId":"168","severity":1,"message":"237","line":10,"column":9,"nodeType":"170","messageId":"171","endLine":10,"endColumn":21},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","no-native-reassign",["238"],"no-negated-in-lhs",["239"],["238"],["239"],"'Link' is defined but never used.","'random' is defined but never used.","'getRandomNumber' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getQuestionsFromFirestore' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["240"],"'score' is assigned a value but never used.","'showScore' is assigned a value but never used.",["238"],["239"],"'useEffect' is defined but never used.","'mostAttempts' is assigned a value but never used.","'setMostAttempts' is assigned a value but never used.","'highestPercentage' is assigned a value but never used.","'setHighestPercentage' is assigned a value but never used.","'useContext' is defined but never used.","'submitQ' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCorrectAnswers', 'quizOver', and 'timeOver'. Either include them or remove the dependency array.",["241"],"React Hook useEffect has missing dependencies: 'selectedAnswers' and 'timeOver'. Either include them or remove the dependency array.",["242"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'user' and 'userDetails'. Either include them or remove the dependency array.",["243"],"'useCallback' is defined but never used.","'QuestionConsumer' is assigned a value but never used.",["238"],["239"],"'useState' is defined but never used.",["238"],["239"],"'defaultUser' is assigned a value but never used.","'UserConsumer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onAuthStateChange'. Either include it or remove the dependency array.",["244"],"'useReducer' is defined but never used.","'AdminQuestionConsumer' is assigned a value but never used.",["238"],["239"],"'QuestionContext' is defined but never used.","'dirty' is assigned a value but never used.","'isSubmitting' is assigned a value but never used.","'handleReset' is assigned a value but never used.","'setAllQs' is assigned a value but never used.","'colorConst' is assigned a value but never used.","'fontWeightConst' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Loader' is defined but never used.","'axios' is defined but never used.","'firebase' is defined but never used.","'questions' is assigned a value but never used.","'setQuestions' is assigned a value but never used.","'uniqueRandom' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},"Update the dependencies array to be: [getQuestionsFromFirestore, user]",{"range":"255","text":"256"},"Update the dependencies array to be: [duration, getCorrectAnswers, quizOver, timeOver]",{"range":"257","text":"258"},"Update the dependencies array to be: [selectedAnswers, timeOver]",{"range":"259","text":"260"},"Update the dependencies array to be: [user, userDetails, userDetailsLoading]",{"range":"261","text":"262"},"Update the dependencies array to be: [onAuthStateChange]",{"range":"263","text":"264"},[2740,2742],"[getQuestionsFromFirestore, user]",[1250,1260],"[duration, getCorrectAnswers, quizOver, timeOver]",[1916,1918],"[selectedAnswers, timeOver]",[1400,1420],"[user, userDetails, userDetailsLoading]",[2875,2877],"[onAuthStateChange]"]