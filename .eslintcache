[{"/home/ahsan/REACT APPS/wahnilogin/src/components/context/user1Context.js":"1","/home/ahsan/REACT APPS/wahnilogin/src/components/Registration/myAccount.js":"2","/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/quizPlay.js":"3","/home/ahsan/REACT APPS/wahnilogin/src/components/Profile/profile.js":"4","/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/whiteLink.js":"5","/home/ahsan/REACT APPS/wahnilogin/src/components/Ranking/rankingScreen.js":"6","/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/questionCard.js":"7","/home/ahsan/REACT APPS/wahnilogin/src/reportWebVitals.js":"8","/home/ahsan/REACT APPS/wahnilogin/src/components/context/adminQcontext.js":"9","/home/ahsan/REACT APPS/wahnilogin/src/components/footer/footer.js":"10","/home/ahsan/REACT APPS/wahnilogin/src/components/home.js":"11","/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/loader.js":"12","/home/ahsan/REACT APPS/wahnilogin/src/components/Layout/navbar.js":"13","/home/ahsan/REACT APPS/wahnilogin/src/components/questionsScreen/showQuestions.js":"14","/home/ahsan/REACT APPS/wahnilogin/src/index.js":"15","/home/ahsan/REACT APPS/wahnilogin/src/components/context/questionsContext.js":"16","/home/ahsan/REACT APPS/wahnilogin/src/components/questionsScreen/addDelQs.js":"17","/home/ahsan/REACT APPS/wahnilogin/src/App.js":"18","/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/questionCardGlobal.js":"19","/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/quizScreen.js":"20","/home/ahsan/REACT APPS/wahnilogin/src/firebase.js":"21"},{"size":3354,"mtime":1609169906235,"results":"22","hashOfConfig":"23"},{"size":5706,"mtime":1609179534410,"results":"24","hashOfConfig":"23"},{"size":8996,"mtime":1609345343733,"results":"25","hashOfConfig":"23"},{"size":7338,"mtime":1609222868219,"results":"26","hashOfConfig":"23"},{"size":385,"mtime":1609172644871,"results":"27","hashOfConfig":"23"},{"size":9637,"mtime":1609188526306,"results":"28","hashOfConfig":"23"},{"size":9914,"mtime":1609234875129,"results":"29","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"23"},{"size":1186,"mtime":1609329068700,"results":"31","hashOfConfig":"23"},{"size":875,"mtime":1608642097608,"results":"32","hashOfConfig":"23"},{"size":7466,"mtime":1609346915720,"results":"33","hashOfConfig":"23"},{"size":305,"mtime":1608799122758,"results":"34","hashOfConfig":"23"},{"size":392,"mtime":1606762397887,"results":"35","hashOfConfig":"23"},{"size":5103,"mtime":1609344513515,"results":"36","hashOfConfig":"23"},{"size":500,"mtime":499162500000,"results":"37","hashOfConfig":"23"},{"size":4303,"mtime":1608131218727,"results":"38","hashOfConfig":"23"},{"size":8876,"mtime":1609344631762,"results":"39","hashOfConfig":"23"},{"size":1539,"mtime":1608877422162,"results":"40","hashOfConfig":"23"},{"size":2091,"mtime":1609235597549,"results":"41","hashOfConfig":"23"},{"size":1944,"mtime":1608984338472,"results":"42","hashOfConfig":"23"},{"size":574,"mtime":1608140162817,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"1of4z6f",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"63"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"63"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"/home/ahsan/REACT APPS/wahnilogin/src/components/context/user1Context.js",["102","103","104","105","106"],"import React, { useContext, useEffect, useCallback, useState } from \"react\";\r\nimport firebase from \"../../firebase\";\r\n\r\nconst defaultUser = { loggedIn: false, email: \"\" };\r\nexport const UserContext = React.createContext({});\r\n\r\nconst UserProvider = UserContext.Provider;\r\nconst UserConsumer = UserContext.Consumer;\r\n\r\n// function onAuthStateChange(callback) {\r\n// make sure user register or login\r\n// }\r\n\r\n// user is added or logged in and sent to all the components of this site through this context\r\n\r\nexport function UserContextProvider(props) {\r\n  const [user, setUser] = useState({ loggedIn: false });\r\n  const [userScores, setUserScores] = useState(null);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  // loading\r\n  const [userLoading, setuserLoading] = useState(true);\r\n  const [userScoresLoading, setuserScoresLoading] = useState(false);\r\n  const [userDetailsLoading, setuserDetailsLoading] = useState(false);\r\n\r\n  function onAuthStateChange() {\r\n    setuserLoading(true);\r\n    setuserDetailsLoading(true);\r\n    setuserScoresLoading(true);\r\n\r\n    return firebase.auth().onAuthStateChanged((user1) => {\r\n      if (user1) {\r\n        setUser({\r\n          loggedIn: true,\r\n          email: user1.email,\r\n          name: user1.displayName,\r\n          id: user1.uid,\r\n          number: user1.phoneNumber,\r\n          photoURL: user1.photoURL,\r\n        });\r\n\r\n        setuserLoading(false);\r\n\r\n        firebase\r\n          .firestore()\r\n          .collection(`rankings`)\r\n          .where(\"uid\", \"==\", user1.uid)\r\n          .orderBy(\"attendedAt\", \"desc\")\r\n          .limit(1)\r\n          .onSnapshot(\r\n            (thisisquery) => {\r\n              const list = [];\r\n              thisisquery.forEach((doc) => {\r\n                list.push({ ...doc.data(), id: doc.id });\r\n              });\r\n              setUserScores(list);\r\n              setuserScoresLoading(false);\r\n            },\r\n            (err) => {\r\n              console.log(\"user last score unable to fetch\", err);\r\n              userScoresLoading(false);\r\n            }\r\n          );\r\n        // get user details\r\n        firebase\r\n          .firestore()\r\n          .doc(`users/${user1.uid}`)\r\n          .onSnapshot(\r\n            (docData) => {\r\n              const list = docData.data();\r\n              setUserDetails(list);\r\n              setuserDetailsLoading(false);\r\n            },\r\n            (err) => {\r\n              console.log(\"Unable to fetch user Details\", err);\r\n              setuserDetailsLoading(false);\r\n            }\r\n          );\r\n      } else {\r\n        setUser({ loggedIn: false });\r\n        setUserScores(null);\r\n        setUserDetails(null);\r\n        setuserLoading(false);\r\n        setuserDetailsLoading(false);\r\n        setuserScoresLoading(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  // on useEffect user is authorized and user details are set and sent via context API to all components\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChange();\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <UserProvider\r\n      value={{\r\n        user: user,\r\n        userScores: userScores,\r\n        userDetails: userDetails,\r\n        userLoading: userLoading,\r\n        userScoresLoading: userScoresLoading,\r\n        userDetailsLoading: userDetailsLoading,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </UserProvider>\r\n  );\r\n}\r\n",["107","108"],"/home/ahsan/REACT APPS/wahnilogin/src/components/Registration/myAccount.js",[],["109","110"],"/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/quizPlay.js",["111","112","113","114","115"],"import { Redirect, Link } from \"react-router-dom\";\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport { UserContext } from \"../context/user1Context\";\r\nimport \"./quizScreen.css\";\r\nimport QuestionCard from \"./questionCard\";\r\nimport Loader from \"../../globalComponents/loader\";\r\nimport firebase from \"../../firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Home() {\r\n  const uniqueRandom = require('unique-random');\r\n  function random(range) {\r\n    return uniqueRandom(1, range)\r\n  }\r\n  // user details and scores\r\n  const userContextObject = useContext(UserContext);\r\n  const user = userContextObject.user;\r\n  const userScores = userContextObject.userScores;\r\n  const userScoresLoading = userContextObject.userScoresLoading;\r\n  const userDetailsLoading = userContextObject.userDetailsLoading;\r\n  // shuffled questions\r\n  const [questions, setQuestions] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  // useHistory hook to redirect to '/Quiz' on login if registration is complete\r\n  const history = useHistory();\r\n\r\n  function getRandomNumber(min, max) {\r\n    return Math.ceil(Math.random() * (max - min) + min);\r\n  }\r\n\r\n  async function getQuestionsFromFirestore() {\r\n    // fetch the last added question doc from firestore\r\n    console.log('started getting 1st document')\r\n    firebase\r\n      .firestore()\r\n      .collection(\"questions\")\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .limit(1)\r\n      .get()\r\n      .then((docData) => {\r\n        const list1 = [];\r\n        docData.forEach((doc) => {\r\n          list1.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        console.log(`got 1st doc with index : ${list1[0].index}`)\r\n        // check if list has an object with index\r\n        if (list1.length > 0) {\r\n          const totalQuestions = list1[0].index;\r\n\r\n          // check if total questions is below 10 or 100 or 1000\r\n          const divisibleNumber = () => {\r\n            if (totalQuestions < 10) {\r\n              return 10;\r\n            } else if (totalQuestions < 100) {\r\n              return 10;\r\n            } else if (totalQuestions < 1000) {\r\n              return 100;\r\n            } else if (totalQuestions < 10000) {\r\n              return 1000;\r\n            }\r\n          };\r\n          console.log(`disvisible number : ${divisibleNumber()}`)\r\n          const randomNumbersArrayLength =\r\n            Math.floor(totalQuestions / divisibleNumber()) + 1;\r\n\r\n          console.log(`randomNumbersArrayLength: ${randomNumbersArrayLength}`)\r\n          // get a random number between 1 and random numbers array length\r\n          \r\n          const aRandomNumber = getRandomNumber(0.5, randomNumbersArrayLength);\r\n\r\n          console.log(`random: ${aRandomNumber}`)\r\n\r\n          // based on this random number generated, get questions\r\n          if (aRandomNumber < randomNumbersArrayLength) {\r\n            console.log(`fetching docs less than multiple of 10`)\r\n            firebase\r\n              .firestore()\r\n              .collection(\"questions\")\r\n              .where(\"index\", \"<=\", aRandomNumber * divisibleNumber())\r\n              .limit(divisibleNumber())\r\n              .get()\r\n              .then((docData2) => {\r\n                console.log(`number of docs fetched: ${aRandomNumber * divisibleNumber()}`)\r\n                const list2 = [];\r\n                docData2.forEach((doc) => {\r\n                  list2.push({ ...doc.data(), id: doc.id });\r\n                });\r\n                // randomise list\r\n                const randomNumber = uniqueRandom(1, list2.length-1);\r\n                const newArray = [randomNumber(), randomNumber(), randomNumber(), randomNumber(), randomNumber()]\r\n                const newQuestionsArray = [];\r\n                for (let i = 0; i < newArray.length; i++) {\r\n                  console.log(`added ${i} questions with index ${newArray[i]}`)\r\n                  newQuestionsArray.push(list2[newArray[i]])\r\n                }\r\n                setQuestions(newQuestionsArray);\r\n                setIsLoading(false);\r\n              })\r\n              .catch((err) => {\r\n                // history.push(\"/Quiz\");\r\n                window.alert(\"couldnt fetch questions\");\r\n              });\r\n          } else {\r\n            console.log(`fetching docs after: index ${(aRandomNumber - 1) * divisibleNumber()} `)\r\n            firebase\r\n              .firestore()\r\n              .collection(\"questions\")\r\n              .where(\"index\", \">=\", (aRandomNumber - 1) * divisibleNumber())\r\n              .limit(divisibleNumber())\r\n              .get()\r\n              .then((docData3) => {\r\n                const list3 = [];\r\n                docData3.forEach((doc) => {\r\n                  list3.push({ ...doc.data(), id: doc.id });\r\n                });\r\n                if (list3.length < 5) {\r\n                  console.log(`if fetched docs are low : ${list3.length}`)\r\n                  firebase\r\n                    .firestore()\r\n                    .collection(\"questions\")\r\n                    .where(\r\n                      \"index\",\r\n                      \"<\",\r\n                      (aRandomNumber - 1) * divisibleNumber()\r\n                    )\r\n                    .limit(divisibleNumber())\r\n                    .get()\r\n                    .then((thisisquery1) => {\r\n                      thisisquery1.forEach((doc) => {\r\n                        list3.push({ ...doc.data(), id: doc.id });\r\n                      });\r\n                      console.log(`fetched even more docs : ${list3.length}`)\r\n\r\n                      // randomise list \r\n                      const randomNumber3a = uniqueRandom(1, list3.length -1);\r\n                const newArray3a = [randomNumber3a(), randomNumber3a(), randomNumber3a(), randomNumber3a(), randomNumber3a()]\r\n                console.log(`randomeNumbers are: ${newArray3a}`)\r\n                const newQuestionsArray3a = [];\r\n                for (let i = 0; i < newArray3a.length; i++) {\r\n                  newQuestionsArray3a.push(list3[newArray3a[i]])\r\n                }\r\n                      setQuestions(newQuestionsArray3a);\r\n                      setIsLoading(false);\r\n                    })\r\n                    .catch((err) => {\r\n                      history.push(\"/Quiz\");\r\n                      window.alert(\"couldnt fetch questions\");\r\n                    });\r\n                } else {\r\n                  console.log(`if fetched docs are enough : ${list3.length}`)\r\n\r\n                  // randomise list\r\n                const randomNumber3 = uniqueRandom(1, list3.length-1);\r\n                const newArray3 = [randomNumber3(), randomNumber3(), randomNumber3(), randomNumber3(), randomNumber3()]\r\n                const newQuestionsArray3 = [];\r\n                for (let i = 0; i < newArray3.length; i++) {\r\n                  newQuestionsArray3.push(list3[newArray3[i]])\r\n                }\r\n                  setQuestions(newQuestionsArray3);\r\n                  setIsLoading(false);\r\n                }\r\n              })\r\n              .catch((err) => {\r\n                history.push(\"/Quiz\");\r\n                window.alert(\"couldnt fetch questions\");\r\n              });\r\n          }\r\n        }\r\n      })\r\n      .catch(err => {\r\n        window.alert('Unable to Reach backend', err)\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    getQuestionsFromFirestore();\r\n  }, [])\r\n\r\n  // question Index to be shown to the user\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  // calculate scores=\r\n  const [score, setScore] = useState(0);\r\n  // when timeOut or onSubmit the score is shown (showscore set to true)\r\n  const [showScore, setShowScore] = useState(false);\r\n\r\n  // fetch score hsitory of user from backend to send both score and percentage increase to backend for rankings\r\n\r\n  function nextQ(nextQuestion) {\r\n    setCurrentQuestion(nextQuestion);\r\n\r\n    // const nextQuestion = currentQuestion + 1;\r\n    // if (nextQuestion < questions.length) {\r\n    // }\r\n  }\r\n\r\n  function submitQ(score) {\r\n    setScore(score);\r\n    setShowScore(true);\r\n\r\n    // score with user id is sent to backEnd to store with new Date()\r\n  }\r\n\r\n  // if there is no user logged in this is redirected to myAccount for login or register\r\n  if (!user || !user.loggedIn) return <Redirect to=\"/myAccount\" />;\r\n\r\n  if (user && !isLoading && !userScoresLoading && !userDetailsLoading) {\r\n    return (\r\n      <div className=\"body\">\r\n        <div className=\"questionDiv\">\r\n          <QuestionCard\r\n            currentQuestion={currentQuestion}\r\n            nextQ={nextQ}\r\n            submitQ={submitQ}\r\n            questions={questions}\r\n            user={user}\r\n            userScores={userScores}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (\r\n    (user && isLoading) ||\r\n    (user && userScoresLoading) ||\r\n    (user && userDetailsLoading)\r\n  ) {\r\n    return (\r\n      <div className=\"flexCenter body\">\r\n        <Loader borderWidth=\"5px\" width=\"50px\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","/home/ahsan/REACT APPS/wahnilogin/src/components/Profile/profile.js",["116"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { UserContext } from \"../context/user1Context\";\r\nimport WhiteLink from '../../globalComponents/whiteLink';\r\nimport firebase from '../../firebase'\r\nimport Loader from \"../../globalComponents/loader\";\r\n\r\nfunction Profile(props) {\r\n  // user details and scores\r\n  const userContextObject = useContext(UserContext);\r\n  const user = userContextObject.user;\r\n  const userScores = userContextObject.userScores;\r\n  const userDetails = userContextObject.userDetails;\r\n  const userDetailsLoading = userContextObject.userDetailsLoading;\r\n  // profileUpdateIsLoading\r\n  const [profileUpdateIsLoading, setprofileUpdateIsLoading] = useState(false)\r\n  // inputs\r\n  const [professionInput, setprofessionInput] = useState('')\r\n  const [addressInput, setaddressInput] = useState('')\r\n\r\n  \r\n  // complete profile\r\nconst [completeProfileClicked, setcompleteProfileClicked] = useState(false)\r\n  useEffect(() => {\r\n    if(user && !userDetailsLoading && (userDetails !== undefined)) {\r\n      if ((userDetails.address !== null) && (userDetails.address !== undefined)) {\r\n        setaddressInput(userDetails.address);\r\n      setprofessionInput(userDetails.profession)\r\n      }\r\n    }\r\n  }, [userDetailsLoading]);\r\n\r\n  const username = () => {\r\n    \r\n    if (user.name === null || user.name === undefined || user.name === '') {\r\n      return (\r\n        <p style={{ fontSize: \"24px\" }}>\r\n        <b>Guest</b>\r\n        </p>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <p style={{ fontSize: \"24px\" }}>\r\n        {user.name}<b>{user.name}</b>\r\n        </p>\r\n      )\r\n    }\r\n  };\r\n  const numberOfTries = () => {\r\n    if(userScores !== null && userScores !== undefined && (userScores.length > 0)) {\r\n      return  userScores[0].attempt\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n  const highScore = () => {\r\n    if(userDetails !== null && userDetails !== undefined) {\r\n      if ((userDetails.highestScore !== null) || (userDetails.highestScore !== undefined)) {\r\n        return userDetails.highestScore\r\n      } else {\r\n        return 0\r\n      }\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  function onEditNameClick() {\r\n    var newName = window.prompt(\"Enter your new name\", user.name);\r\n    if(newName === null) {\r\n      return;\r\n    }\r\n    else if (newName !== user.name) {\r\n      setprofileUpdateIsLoading(true)\r\n      firebase\r\n          .auth()\r\n          .currentUser\r\n          .updateProfile({\r\n            displayName: newName\r\n          })\r\n          .then(res => {\r\n            window.alert('Your Profile has been Updated')\r\n            setprofileUpdateIsLoading(false)\r\n          })\r\n          .catch(err => {\r\n            window.alert('Unable to update', err)\r\n            setprofileUpdateIsLoading(false)\r\n          });\r\n        }\r\n    \r\n  }\r\n\r\n  function logout() {\r\n    //on log out click inside <Profile />\r\n      firebase.auth().signOut();\r\n    }\r\n\r\n  function onCompleteProfileClicked() {\r\n    if(completeProfileClicked) {\r\n      setcompleteProfileClicked(false)\r\n    } else {\r\n      setcompleteProfileClicked(true)\r\n    }\r\n  }\r\n\r\n  const updateORview = () => {\r\n    if (completeProfileClicked) {\r\n      return 'View'\r\n    } else {\r\n      return 'Update'\r\n    }\r\n  }\r\n\r\n  function updateProfile() {\r\n    if(profileUpdateIsLoading) {\r\n      window.alert('Updation in progress')\r\n    } else {\r\n      if (addressInput !== '' && professionInput !== '') {\r\n        if (addressInput !== userDetails.address || professionInput !== userDetails.profession) {\r\n          setprofileUpdateIsLoading(true)\r\n          firebase\r\n          .firestore()\r\n          .doc(`users/${user.id}`)\r\n          .update({\r\n            'address': addressInput,\r\n            'profession' : professionInput,\r\n          })\r\n          .then(res => {\r\n            window.alert('Your profile has been Updated');\r\n            setprofileUpdateIsLoading(false)\r\n          })\r\n          .catch(err => {\r\n            window.alert('Coudnot update your profile', err);\r\n            setprofileUpdateIsLoading(false)\r\n          })\r\n        } else {\r\n          window.alert('No changes detected')\r\n        }\r\n      } else {\r\n        window.alert('Both fields cannot be empty')\r\n      }\r\n    }\r\n  }\r\n  //check if user object has a name\r\n  //if NO name, complete registration form is shown else Profile is shown\r\n\r\n  return (\r\n    <div className=\"body fontMontserrat\">\r\n      <div className=\"cardOne wahniBgColor flexCenter\" id=\"profileHeight\">\r\n        {\r\n          completeProfileClicked ? \r\n          null\r\n          :\r\n          <div className=\"profileBoxes profileBox1\">\r\n          <div>\r\n          {username()}\r\n          </div>\r\n          <div className='editButtonContainer'>\r\n          <img onClick={() => onEditNameClick()} src='https://www.iconsdb.com/icons/preview/white/edit-xxl.png' alt=\"Edit Name\" />\r\n          </div>\r\n          <div>\r\n          <p id=\"phoneNumber\">{user.number}</p>\r\n          </div>\r\n        </div>\r\n        }\r\n\r\n        {\r\n          completeProfileClicked ? \r\n          \r\n          <div className='completeProfileInputContain'>\r\n            <div className=\"numberInputContainer\">\r\n          <p>Profession <b>or Qualification</b></p>\r\n          <input\r\n            className=\"numberInput fontMontserrat\"\r\n            value={professionInput}\r\n            onChange={(e) => setprofessionInput(e.target.value)}\r\n            // type=\"number\"\r\n            placeholder='e.g. Student / B.Tech'\r\n            name=\"mobile\"\r\n            required={true}\r\n          />\r\n        </div>\r\n        <div style={{marginTop: '8px'}} className=\"numberInputContainer\">\r\n          <p>Your <b>Address</b></p>\r\n          <input\r\n            className=\"numberInput fontMontserrat\"\r\n            value={addressInput}\r\n            onChange={(e) => setaddressInput(e.target.value)}\r\n            // type=\"number\"\r\n            placeholder='e.g. Kechery, Thrissur - P.O 680519'\r\n            name=\"mobile\"\r\n            required={true}\r\n          />\r\n        </div>\r\n        <div onClick={() => updateProfile()} className='updateProfileButton wahniColor'>\r\n        {\r\n          profileUpdateIsLoading ? \r\n          <Loader borderWidth='3px' width='10px'/>\r\n          :\r\n          <p><b>Update</b> Profile</p>\r\n        }\r\n        {/* <img onClick={() => onEditNameClick()} src='https://www.iconsdb.com/icons/preview/white/save-as-xxl.png' alt=\"\" /> */}\r\n        </div>\r\n          </div>\r\n\r\n          :\r\n\r\n          <div className=\"profileBoxes profileBox2\">\r\n          <div className=\"profileBox2singleRow\">\r\n            <p>\r\n              Number of <b>Tries</b>\r\n            </p>\r\n            <p>\r\n              <b>{numberOfTries()}</b>\r\n            </p>\r\n          </div>\r\n          <div className=\"profileBox2singleRow\">\r\n            <p>\r\n              High<b>score</b>\r\n            </p>\r\n            <p>\r\n              <b>{highScore()}</b>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        }\r\n        <img className='logOutIcon' onClick={() => logout()} src='https://www.iconsdb.com/icons/preview/white/logout-xxl.png' alt=\"Logout\" />\r\n      </div>\r\n      <WhiteLink onClick={() => onCompleteProfileClicked(true)}>\r\n        <b>{updateORview()}</b> Your Profile\r\n      </WhiteLink>\r\n      <WhiteLink>\r\n        <b>Go to</b> Quiz\r\n      </WhiteLink>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/whiteLink.js",["117","118"],"import React, { useState, useContext } from \"react\";\nimport './whiteLink.css'\n\nfunction WhiteLink(props) {\n  return (\n      <div onClick={props.onClick} className='linkContainer'>\n      <div\n        className=\"linkContain wahniColor\"\n      >\n          <p style={{ paddingLeft: \"25px\"}}>\n        {props.children}\n        </p>\n      </div>\n      </div>\n  );\n}\n\nexport default WhiteLink;\n","/home/ahsan/REACT APPS/wahnilogin/src/components/Ranking/rankingScreen.js",["119","120","121","122","123","124"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./rankingScreen.css\";\r\nimport \"../Registration/myAccount.css\";\r\nimport firebase from \"../../firebase\";\r\nimport Loader from \"../../globalComponents/loader\";\r\n\r\nfunction RankingScreen() {\r\n    //Logic Calculation to get Ranking of each types\r\n  const [topScores1, setTopScores1] = useState([]);\r\n  const [mostAttempts1, setMostAttempts1] = useState([]);\r\n  const [highestPercentage1, setHighestPercentage1] = useState([]);\r\n  // set loadings\r\n  const [topScoresLoading, setTopScoresLoading] = useState(true);\r\n  const [mostAttemptsLoading, setMostAttemptsLoading] = useState(true);\r\n  const [highestPercentageLoading, setHighestPercentageLoading] = useState(false);\r\n\r\n//   useEffect(() => {\r\n    \r\n//   }, []);\r\n\r\n  // on useEffect fetch user scores from the backEnd\r\n\r\n  const rankings = [\r\n    {\r\n      userid: \"11111\",\r\n      username: \"AAAAA\",\r\n      scores: [\r\n        {\r\n          submittedAt: 1,\r\n          score: \"5\",\r\n          percentageIncrease: \"25\",\r\n        },\r\n        {\r\n          submittedAt: 2,\r\n          score: \"10\",\r\n          percentageIncrease: \"50\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      userid: \"22222\",\r\n      username: \"BBBBB\",\r\n      scores: [\r\n        {\r\n          submittedAt: 1,\r\n          score: \"45\",\r\n          percentageIncrease: \"56\",\r\n        },\r\n        {\r\n          submittedAt: 2,\r\n          score: \"5\",\r\n          percentageIncrease: \"45\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      userid: \"33333\",\r\n      username: \"CCCCC\",\r\n      scores: [\r\n        {\r\n          submittedAt: 1,\r\n          score: \"23\",\r\n          percentageIncrease: \"45\",\r\n        },\r\n        {\r\n          submittedAt: 2,\r\n          score: \"56\",\r\n          percentageIncrease: \"13\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      userid: \"44444\",\r\n      username: \"DDDDD\",\r\n      scores: [\r\n        {\r\n          submittedAt: 1,\r\n          score: \"55\",\r\n          percentageIncrease: \"12\",\r\n        },\r\n        {\r\n          submittedAt: 2,\r\n          score: \"8\",\r\n          percentageIncrease: \"16\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      userid: \"55555\",\r\n      username: \"EEEEE\",\r\n      scores: [\r\n        {\r\n          submittedAt: 1,\r\n          score: \"63\",\r\n          percentageIncrease: \"32\",\r\n        },\r\n        {\r\n          submittedAt: 2,\r\n          score: \"80\",\r\n          percentageIncrease: \"60\",\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  //all these contribute to UI for the animation effect\r\n  //START\r\n  const [mostAttemptsClicked, setmostAttemptsClicked] = useState(false);\r\n  const [topScorersClicked, settopScorersClicked] = useState(false);\r\n  const [topPerformersCLicked, settopPerformersCLicked] = useState(false);\r\n\r\n  const loginContainer1 = topScorersClicked\r\n    ? \"rankCard rankCardHeight400 wahniBgColor\"\r\n    : \"rankCard rankCardHeight60\";\r\n  const headerContainer1 = topScorersClicked\r\n    ? \"rankHeaderDiv\"\r\n    : \"rankHeaderDiv rankHeaderDivClick wahniColor\";\r\n  const rankTable1 = topScorersClicked ? \"rankTable\" : \"hide-section1\";\r\n\r\n  const loginContainer2 = mostAttemptsClicked\r\n    ? \"rankCard rankCardHeight400 wahniBgColor\"\r\n    : \"rankCard rankCardHeight60\";\r\n  const headerContainer2 = mostAttemptsClicked\r\n    ? \"rankHeaderDiv\"\r\n    : \"rankHeaderDiv rankHeaderDivClick wahniColor\";\r\n  const rankTable2 = mostAttemptsClicked\r\n    ? \"rankTable\"\r\n    : \"rankTable hide-section1\";\r\n\r\n  const loginContainer3 = topPerformersCLicked\r\n    ? \"rankCard rankCardHeight400 wahniBgColor\"\r\n    : \"rankCard rankCardHeight60\";\r\n  const headerContainer3 = topPerformersCLicked\r\n    ? \"rankHeaderDiv\"\r\n    : \"rankHeaderDiv rankHeaderDivClick wahniColor\";\r\n  const rankTable3 = topPerformersCLicked\r\n    ? \"rankTable\"\r\n    : \"rankTable hide-section1\";\r\n\r\n  //Logic Calculation to get Ranking of each types\r\n  const [mostAttempts, setMostAttempts] = useState([]);\r\n  const [highestPercentage, setHighestPercentage] = useState([]);\r\n\r\n  function topScore() {\r\n    if(topScores1.length < 1) {\r\n        setTopScoresLoading(true)\r\n    firebase\r\n      .firestore()\r\n      .collection(\"rankings\")\r\n      .orderBy(\"score\", \"desc\")\r\n      .limit(5)\r\n      .onSnapshot(\r\n        (docData) => {\r\n          const list = [];\r\n          docData.forEach((doc) => {\r\n            list.push({ ...doc.data(), id: doc.id });\r\n          });\r\n          console.log(list);\r\n          setTopScoresLoading(false);\r\n          setTopScores1(list)\r\n        },\r\n        (err) => {\r\n          window.alert(\"Unable to get rankings\", err);\r\n        }\r\n      );\r\n    } else {\r\n        setTopScoresLoading(false)\r\n    }\r\n    \r\n}\r\n\r\n  function mostAttempt() {\r\n    if(mostAttempts1.length < 1) {\r\n        setMostAttemptsLoading(true)\r\n    firebase\r\n      .firestore()\r\n      .collection(\"rankings\")\r\n      .orderBy(\"attempt\", \"desc\")\r\n      .limit(5)\r\n      .onSnapshot(\r\n        (docData) => {\r\n          const list = [];\r\n          docData.forEach((doc) => {\r\n            list.push({ ...doc.data(), id: doc.id });\r\n          });\r\n          console.log(list);\r\n          setMostAttemptsLoading(false);\r\n          setMostAttempts1(list)\r\n        },\r\n        (err) => {\r\n          window.alert(\"Unable to get rankings\", err);\r\n        }\r\n      );\r\n    } else {\r\n        setMostAttemptsLoading(false)\r\n    }\r\n  }\r\n\r\n  function percentageHighest() {\r\n    if(highestPercentage1.length < 1) {\r\n        setHighestPercentageLoading(true)\r\n    firebase\r\n      .firestore()\r\n      .collection(\"rankings\")\r\n      .orderBy(\"perecentageIncrease\", \"desc\")\r\n      .limit(5)\r\n      .onSnapshot(\r\n        (docData) => {\r\n          const list = [];\r\n          docData.forEach((doc) => {\r\n            list.push({ ...doc.data(), id: doc.id });\r\n          });\r\n          console.log(list);\r\n          setHighestPercentageLoading(false);\r\n          setHighestPercentage1(list)\r\n        },\r\n        (err) => {\r\n          window.alert(\"Unable to get rankings\", err);\r\n        }\r\n      );\r\n    } else {\r\n        setHighestPercentageLoading(false)\r\n    }\r\n  }\r\n\r\n  //Click Handlers of each ranking Components\r\n  function handleTopScoreClick(e) {\r\n    settopScorersClicked(true);\r\n    setmostAttemptsClicked(false);\r\n    settopPerformersCLicked(false);\r\n    topScore();\r\n  }\r\n  function handleMostAttemptClick(e) {\r\n    settopScorersClicked(false);\r\n    settopPerformersCLicked(false);\r\n    setmostAttemptsClicked(true);\r\n    mostAttempt();\r\n  }\r\n  function handleTopPerformerClick(e) {\r\n    settopScorersClicked(false);\r\n    settopPerformersCLicked(true);\r\n    setmostAttemptsClicked(false);\r\n    percentageHighest();\r\n  }\r\n\r\n  // if user is logged in we show profile else we show register or login page\r\n\r\n  return (\r\n    <div className=\"body fontMontserrat\">\r\n      <div className={loginContainer1}>\r\n        {/* <div className='form'> */}\r\n        <div className={headerContainer1} onClick={handleTopScoreClick}>\r\n          <p>\r\n            Top <b>Scores</b>\r\n          </p>\r\n        </div>\r\n            \r\n            {topScoresLoading ? \r\n            <div className={rankTable1}>\r\n            <div className='flexCenter'>\r\n            <Loader borderWidth='5px' width='20px' />\r\n            </div>\r\n            </div>\r\n            :\r\n            <div className={rankTable1}>\r\n            {topScores1.map((data, index) => {\r\n                return (\r\n                  <div className=\"singleRankRow\">\r\n                    <div className=\"nameText rankTextStyle\">{data.username}</div>\r\n                    <div className=\"scoreText rankTextStyle\">{data.score}</div>\r\n                  </div>\r\n                );\r\n              })}    \r\n            </div>\r\n            }\r\n          \r\n        </div>\r\n      <div className={loginContainer2}>\r\n        {/* <div className='form'> */}\r\n        <div className={headerContainer2} onClick={handleMostAttemptClick}>\r\n          <p>\r\n            Most <b>Attempts</b>\r\n          </p>\r\n        </div>\r\n        {\r\n            mostAttemptsLoading ? \r\n            <div className={rankTable2}>\r\n            <div className='flexCenter'>\r\n            <Loader borderWidth='5px' width='20px' />\r\n            </div>\r\n            </div>\r\n\r\n            :\r\n\r\n            <div className={rankTable2}>\r\n            {mostAttempts1.map((data, index) => {\r\n                return (\r\n                  <div className=\"singleRankRow\">\r\n                    <div className=\"nameText rankTextStyle\">{data.username}</div>\r\n                    <div className=\"scoreText rankTextStyle\">{data.attempt}</div>\r\n                  </div>\r\n                );\r\n              })}    \r\n            </div>\r\n        }\r\n        {/* </div> */}\r\n      </div>\r\n\r\n      <div className={loginContainer3}>\r\n        {/* <div className='form'> */}\r\n        <div className={headerContainer3} onClick={handleTopPerformerClick}>\r\n          <p>\r\n            Top <b>Performers</b>\r\n          </p>\r\n        </div>\r\n        {\r\n            highestPercentageLoading ? \r\n            <div className={rankTable3}>\r\n            <div className='flexCenter'>\r\n            <Loader borderWidth='5px' width='20px' />\r\n            </div>\r\n            </div>\r\n\r\n            :\r\n\r\n            <div className={rankTable3}>\r\n            {highestPercentage1.map((data, index) => {\r\n                return (\r\n                  <div className=\"singleRankRow\">\r\n                    <div className=\"nameText rankTextStyle\">{data.username}</div>\r\n                    <div className=\"scoreText rankTextStyle\">{data.perecentageIncrease}</div>\r\n                  </div>\r\n                );\r\n              })}    \r\n            </div>\r\n        }\r\n        {/* </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RankingScreen;\r\n",["125","126"],"/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/questionCard.js",["127","128","129"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport firebase from \"../../firebase\";\r\nimport Loader from \"../../globalComponents/loader\";\r\n\r\n\r\nfunction QuestionCard(props) {\r\n\r\n  //from props\r\n  const {\r\n    currentQuestion,\r\n    nextQ,\r\n    submitQ,\r\n    questions,\r\n    // users from context\r\n    user,\r\n    userScores\r\n  } = props;\r\n  // duration to track timer\r\n  const [duration, setDuration] = useState(30);\r\n  //check if time is OVER\r\n  const [timeOver, setTimeOver] = useState(false);\r\n  //check if quiz is over\r\n  const [quizOver, setQuizOver] = useState(false);\r\n  //check if show score is true\r\n  const [showScore, setShowScore] = useState(false);\r\n  //check if something is loading\r\n  // check if first firebase operation is loading\r\n  //basically there are two firebase calls here\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // check if second firebase opretion is loading\r\n  const [isLoading1, setIsLoading1] = useState(false);\r\n  // calculate score \r\n  const [score, setScore] = useState(0)\r\n\r\n  useEffect(() => {\r\n    var timesRun = 0;\r\n    const interval = setInterval(() => {\r\n      if (!timeOver) {\r\n        setDuration((duration) => duration - 1);\r\n        timesRun += 1;\r\n        if(timesRun === 30){\r\n        clearInterval(interval);\r\n    }\r\n      } else {\r\n        clearInterval(interval)\r\n      }\r\n    }, 1000);\r\n\r\n    setTimeout(() => {\r\n      setTimeOver(true);\r\n      setDuration(\"TIME OUT\");\r\n\r\n    }, 30000);\r\n\r\n    return () => clearInterval(interval);\r\n\r\n  }, []);\r\n\r\n  \r\n\r\n  // set an array of correct answers\r\n  const [correctAnswer, setCorrectAnswer] = useState([0,0,0,0,0]);\r\n\r\n  // set an array of answers that are selected\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n\r\n  function answerClickHandler(answer, indexure) {\r\n    // set selectedAnswers arrays each time an answer is selected\r\n    const newArray = [...selectedAnswers];\r\n    newArray[indexure] = answer;\r\n    setSelectedAnswers(newArray);\r\n\r\n    // navigate to next Question\r\n    let nextQuestion = currentQuestion + 1;\r\n    if (nextQuestion < questions.length) {\r\n      nextQ(nextQuestion);\r\n    } else {\r\n      setQuizOver(true)\r\n      setIsLoading(true)\r\n      // submit answers\r\n      getCorrectAnswers();\r\n    }\r\n  }\r\n\r\n  async function getCorrectAnswers() {\r\n    \r\n    //loop over questions and get the answers\r\n    await questions.forEach((q,i) => {\r\n      \r\n\r\n      firebase\r\n      .firestore()\r\n      .doc(`answers/${q.id}`)\r\n      .get()\r\n      .then(docSnap => {\r\n        const answersingle = docSnap.data().answer;\r\n        // set correct answers array\r\n        setCorrectAnswer(prevCorrectAnswer => [...prevCorrectAnswer.slice(0,i), answersingle, ...prevCorrectAnswer.slice(i+1,3)]);\r\n        // if everything is over set quiz over to true\r\n        if(i === questions.length-1) {\r\n          setIsLoading(false)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        setIsLoading(false)\r\n        window.alert('Error fetching answers from firestore')\r\n\r\n      })\r\n    })\r\n  }\r\n\r\n  function onClickToSeeScore() {\r\n    let arrayTest = []\r\n    for (let i = 0; i < questions.length; i++) {\r\n      if(selectedAnswers[i] === correctAnswer[i]) {\r\n        setScore(prevScore => prevScore + 1)\r\n        arrayTest.push('correct')\r\n      }\r\n    }\r\n    setIsLoading(true);\r\n    setIsLoading1(true);\r\n    setShowScore(true);\r\n    // send to firestore\r\n    if (user && user.loggedIn) {\r\n      createScoreObject2submit2firestore(arrayTest.length);\r\n    } else {\r\n      window.alert('You are not logged In')\r\n      setIsLoading(false)\r\n    }\r\n    \r\n  }\r\n\r\n  function createScoreObject2submit2firestore(newScore) {\r\n    //if not first time\r\n    if (user && userScores.length > 0) {\r\n      const lastScore = userScores[0].score;\r\n      \r\n      const newPercentageIncrease = () => {\r\n        if(lastScore === 0) {\r\n          return newScore*100\r\n        } else {\r\n          return (newScore-lastScore)/lastScore*100;\r\n        }\r\n      } \r\n      const newAttempt = userScores[0].attempt + 1;\r\n      // set scores\r\n      let newScoreObject = {\r\n        'uid': user.id,\r\n        'username': user.name,\r\n        'score': newScore,\r\n        'attempt': newAttempt,\r\n        'perecentageIncrease': newPercentageIncrease(),\r\n        'attendedAt': new Date()\r\n      }\r\n      submitting2firestore(newScoreObject)\r\n\r\n      // update userDetails\r\n      if (newScore > lastScore) {\r\n        firebase.firestore()\r\n        .doc(`users/${user.id}`)\r\n        .update({\r\n          'highestScore': newScore,\r\n          'attempt': newAttempt,\r\n          'updatedAt': new Date()\r\n        })\r\n        .then(res => {\r\n          setIsLoading1(false)\r\n          console.log('high score updated')\r\n        })\r\n        .catch(err => {\r\n          window.alert('unable to update your profile:', err)\r\n          setIsLoading1(false)\r\n        })\r\n      } else {\r\n        setIsLoading1(false)\r\n      }\r\n    \r\n    }\r\n    // if first time\r\n    else {\r\n      const username = () => {\r\n        if (user.name === null || user.name === undefined || user.name === '') {\r\n          return user.name\r\n        }\r\n        else {\r\n          return 'Guest'\r\n        }\r\n      };\r\n      // set scores\r\n      let newScoreObject = {\r\n        'uid': user.id,\r\n        'username': username(),\r\n        'score': newScore,\r\n        'attempt': 1,\r\n        'perecentageIncrease': null,\r\n        'attendedAt': new Date(),\r\n      };\r\n      submitting2firestore(newScoreObject);\r\n\r\n      // also add user details\r\n      let userDetails2add = {\r\n        'username': user.name,\r\n        'uid': user.id,\r\n        'totalAttempts': 1,\r\n        'highestScore': newScore,\r\n        'updatedAt': new Date(),\r\n      }\r\n      firebase\r\n      .firestore()\r\n      .doc(`users/${user.id}`)\r\n      .set(userDetails2add)\r\n      .then(res => {\r\n        setIsLoading1(false)\r\n        console.log('new user details ADDED')\r\n      })\r\n      .catch(err => {\r\n        window.alert('Unable to update your Profile :', err)\r\n        setIsLoading1(false)\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  function submitting2firestore(newScoreObject) {\r\n    firebase\r\n      .firestore()\r\n      .collection('rankings')\r\n      .add(newScoreObject)\r\n      .then(res => {\r\n        \r\n        console.log('added to rankings')\r\n\r\n        setIsLoading(false)\r\n      })\r\n      .catch(err => {\r\n        console.log('error')\r\n\r\n        window.alert('Error updating the rankings')\r\n        setIsLoading(false)\r\n      })\r\n  }\r\n\r\n\r\n  if (quizOver && !showScore) {\r\n    return (\r\n      <div className=\"flexContainFull flexCenter fontMontserrat\">\r\n        {\r\n          isLoading ? \r\n          <Loader width='50px' borderWidth='6px' />\r\n          :\r\n          <div className=\"timeOutContainer\">\r\n          <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>You have completed the Quiz</p>\r\n          <div\r\n            className=\"buttonOne wahniColor retryButton\"\r\n            onClick={() =>\r\n              onClickToSeeScore()\r\n            }\r\n          >\r\n            Click to see Score\r\n          </div>\r\n        </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n  if (timeOver && !showScore && !quizOver) {\r\n    return (\r\n      <div className=\"flexContainFull flexCenter fontMontserrat\">\r\n        \r\n        <div className=\"timeOutContainer\">\r\n          <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>TIMEOUT</p>\r\n          <div\r\n            className=\"buttonOne wahniColor retryButton\"\r\n            onClick={() =>\r\n              onClickToSeeScore()\r\n            }\r\n          >\r\n            Click to see Score\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  if ((timeOver && showScore) || showScore || (quizOver && showScore)) {\r\n    return (\r\n      <div className=\"flexContainFull flexCenter\">\r\n        {(isLoading || isLoading1) ? \r\n\r\n        <Loader width='50px' borderWidth='6px' />\r\n\r\n          :\r\n\r\n          <div className=\"scoreContainer\">\r\n          <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n            Congratulations\r\n          </p>\r\n          <p style={{ fontSize: \"18px\" }}>You scored</p>\r\n          <div className=\"scoreNumber\">\r\n            <p style={{ fontSize: \"40px\", fontWeight: \"bold\" }}>{score}</p>\r\n            <p\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                marginTop: 15,\r\n                fontSize: \"22px\",\r\n                fontFamily: \"sans-serif\",\r\n                marginLeft: 5,\r\n              }}\r\n            >\r\n              / {questions.length}\r\n            </p>\r\n          </div>\r\n          <Link className=\"link buttonOne wahniColor retryButton\" to=\"/Quiz\">\r\n            Retry\r\n          </Link>\r\n        </div>\r\n\r\n      }\r\n        \r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"flexContainFull fontMontserrat\">\r\n        <div>\r\n          <div className=\"question-count-timer\">\r\n            <span className=\"question-count\">#{currentQuestion + 1}</span>\r\n\r\n            <div className=\"timer\">\r\n              <div>{duration}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"questionHeadText\">Question</div>\r\n        </div>\r\n\r\n        <div className=\"question-and-answer-section\">\r\n          <div className=\"question-text\">\r\n            {questions[currentQuestion].questionText}\r\n          </div>\r\n\r\n          <div className=\"answer-section wahniColor\">\r\n            {questions[currentQuestion].options.map((option) => (\r\n              <div\r\n                className=\"buttonOne\"\r\n                id=\"answerButton\"\r\n                onClick={() => {\r\n                  answerClickHandler(\r\n                    option,\r\n                    currentQuestion\r\n                  );\r\n                }}\r\n              >\r\n                {option}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionCard;\r\n","/home/ahsan/REACT APPS/wahnilogin/src/reportWebVitals.js",[],"/home/ahsan/REACT APPS/wahnilogin/src/components/context/adminQcontext.js",["130","131","132"],"import React, { useContext, useEffect, useCallback, useState } from 'react';\nimport firebase from '../../firebase'\n\n\nexport const AdminQuestionContext = React.createContext({});\n\nconst AdminQuestionProvider = AdminQuestionContext.Provider;\nconst AdminQuestionConsumer = AdminQuestionContext.Consumer;\n\n// function onAuthStateChange(callback) {\n// make sure user register or login\n// }\n\n  // user is added or logged in and sent to all the components of this site through this context\n\n\nexport function AdminQuestionContextProvider(props) {\n\n    \n\n    // on useEffect fetch questions from the backend and save it in 'qs'\n\n    const [allQs, setAllQs] = useState([])\n\n    useEffect(() => {\n        firebase.firestore()\n        .collection('questions')\n        .orderBy('createdAt', 'desc')\n        .limit(5)\n        .onSnapshot((thisisquery) => {\n          const list = [];\n          thisisquery.forEach((doc) => {\n            list.push({ ...doc.data(), id: doc.id });\n          })\n          setAllQs(list);\n          // console.log(list)\n        })\n      }, []);\n  \n  return (\n    <AdminQuestionProvider value={[allQs, setAllQs]}>\n    {props.children}\n    </AdminQuestionProvider>\n  );\n}\n\n",["133","134"],"/home/ahsan/REACT APPS/wahnilogin/src/components/footer/footer.js",[],"/home/ahsan/REACT APPS/wahnilogin/src/components/home.js",["135","136","137","138","139","140","141"],"/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/loader.js",["142","143"],"import React, { useState, useContext} from 'react';\nimport './loader.css'\n\nfunction Loader(props) {\n\n    const { width, borderWidth } = props\n\n    return (\n        \n            <div style={{height: width, width: width, borderWidth: borderWidth}} className=\"loader\"></div>\n    );\n}\n\nexport default Loader;\n","/home/ahsan/REACT APPS/wahnilogin/src/components/Layout/navbar.js",[],"/home/ahsan/REACT APPS/wahnilogin/src/components/questionsScreen/showQuestions.js",["144","145","146","147","148","149","150"],"/home/ahsan/REACT APPS/wahnilogin/src/index.js",[],["151","152"],"/home/ahsan/REACT APPS/wahnilogin/src/components/context/questionsContext.js",["153","154","155","156"],"import React, { useContext, useEffect, useCallback, useState } from 'react';\n\n\nexport const QuestionContext = React.createContext({});\n\nconst QuestionProvider = QuestionContext.Provider;\nconst QuestionConsumer = QuestionContext.Consumer;\n\n// function onAuthStateChange(callback) {\n// make sure user register or login\n// }\n\n  // user is added or logged in and sent to all the components of this site through this context\n\n\nexport function QuestionContextProvider(props) {\n\n\n    // on useEffect fetch questions from the backend and save it in 'qs'\n\n    const [qs, setqs] = useState([\n            {\n                questionText: 'What is the capital of France?',\n                answerOptions: [\n                    { answerText: 'New York', isCorrect: false },\n                    { answerText: 'London', isCorrect: false },\n                    { answerText: 'Paris', isCorrect: true },\n                    { answerText: 'Dublin', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'Who is CEO of Tesla?',\n                answerOptions: [\n                    { answerText: 'Jeff Bezos', isCorrect: false },\n                    { answerText: 'Elon Musk', isCorrect: true },\n                    { answerText: 'Bill Gates', isCorrect: false },\n                    { answerText: 'Tony Stark', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'The iPhone was created by which company?',\n                answerOptions: [\n                    { answerText: 'Apple', isCorrect: true },\n                    { answerText: 'Intel', isCorrect: false },\n                    { answerText: 'Amazon', isCorrect: false },\n                    { answerText: 'Microsoft', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'How many Harry Potter books are there?',\n                answerOptions: [\n                    { answerText: '1', isCorrect: false },\n                    { answerText: '4', isCorrect: false },\n                    { answerText: '6', isCorrect: false },\n                    { answerText: '7', isCorrect: true },\n                ],\n            },\n            {\n                questionText: 'How many Harry Potter books are there?',\n                answerOptions: [\n                    { answerText: '1', isCorrect: false },\n                    { answerText: '4', isCorrect: false },\n                    { answerText: '6', isCorrect: false },\n                    { answerText: '7', isCorrect: true },\n                ],\n            },\n            {\n                questionText: 'What is the capital of France?',\n                answerOptions: [\n                    { answerText: 'New York', isCorrect: false },\n                    { answerText: 'London', isCorrect: false },\n                    { answerText: 'Paris', isCorrect: true },\n                    { answerText: 'Dublin', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'Who is CEO of Tesla?',\n                answerOptions: [\n                    { answerText: 'Jeff Bezos', isCorrect: false },\n                    { answerText: 'Elon Musk', isCorrect: true },\n                    { answerText: 'Bill Gates', isCorrect: false },\n                    { answerText: 'Tony Stark', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'The iPhone was created by which company?',\n                answerOptions: [\n                    { answerText: 'Apple', isCorrect: true },\n                    { answerText: 'Intel', isCorrect: false },\n                    { answerText: 'Amazon', isCorrect: false },\n                    { answerText: 'Microsoft', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'How many Harry Potter books are there?',\n                answerOptions: [\n                    { answerText: '1', isCorrect: false },\n                    { answerText: '4', isCorrect: false },\n                    { answerText: '6', isCorrect: false },\n                    { answerText: '7', isCorrect: true },\n                ],\n            },\n    ])\n  \n  return (\n    <QuestionProvider value={[qs, setqs]}>\n    {props.children}      \n    </QuestionProvider>\n  );\n}\n\n","/home/ahsan/REACT APPS/wahnilogin/src/components/questionsScreen/addDelQs.js",["157","158","159","160","161","162"],"/home/ahsan/REACT APPS/wahnilogin/src/App.js",["163"],"import MyAccount from './components/Registration/myAccount'\nimport { BrowserRouter, Switch, Route, HashRouter } from 'react-router-dom';\nimport Navbar from './components/Layout/navbar'\nimport Home from './components/home'\nimport QuizPlay from './components/Quiz/quizPlay'\nimport Quiz from './components/Quiz/quizScreen'\nimport RankingScreen from './components/Ranking/rankingScreen'\nimport { UserContextProvider } from './components/context/user1Context';\nimport { QuestionContextProvider } from './components/context/questionsContext';\nimport { AdminQuestionContextProvider } from './components/context/adminQcontext'\nimport AddDel from './components/questionsScreen/addDelQs'\nimport './components/styles/globalStyles.css'\nimport Footer from './components/footer/footer'\n\n\n\n\nfunction App() {\n  return (\n    \n    <HashRouter>\n      <Navbar />\n      <Switch>\n      <UserContextProvider>\n        <Route exact path='/' component={Home} />\n          <Route exact path='/myAccount' component={MyAccount} />\n          <Route exact path='/Quiz' component={Quiz} />\n\n          <QuestionContextProvider>\n          <Route exact path='/Quiz/play' component={QuizPlay} />\n\n          <AdminQuestionContextProvider>\n          <Route exact path='/Quiz/add' component={AddDel} />\n          </AdminQuestionContextProvider>\n          \n          </QuestionContextProvider>\n\n          <Route exact path='/Quiz/ranking' component={RankingScreen} />\n        </UserContextProvider>\n      </Switch>\n      <Footer />\n    </HashRouter>\n\n  );\n}\n\nexport default App;\n","/home/ahsan/REACT APPS/wahnilogin/src/globalComponents/questionCardGlobal.js",["164"],"import React, { useState, useEffect, useReducer} from 'react';\nimport './questionCardGlobal.css'\n\nfunction QuestionCardGlobal(props) {\n    const [Hello, setHello] = useState(false);\n    \n    \n\n    const {question, clickToSeeAnswer, answer, index} = props;\n   \n    useEffect(() => {\n        console.log('rendered')\n        // idNameBasedOnAnswer()\n    }, [question])\n\n    function clickToSeeAnswer1() {\n        clickToSeeAnswer(question.id, index);\n        // forceUpdate;\n        if(Hello) {\n            setHello(false)\n        } else {\n            setHello(true)\n        }\n    }\n\n\n    useEffect(() => {\n        console.log('hello')\n    }, [question])\n\n\n    const idNameBasedOnAnswer = (option) => {\n        if (option === answer) {\n            return 'answerButton2'\n        } else {\n            return 'answerButton1'\n        }\n    }\n\n    return (\n        \n            <div className='questionDiv1'>\n                <div className=\"flexContainFull fontMontserrat\">\n        <div>\n          {/* <div className=\"question-count-timer\">\n            <span className=\"question-count\">#{currentQuestion + 1}</span>\n\n            <div className=\"timer\">\n              <div>{duration}</div>\n            </div>\n          </div> */}\n\n          <div className=\"questionHeadText1\">Question</div>\n        </div>\n\n        <div className=\"question-and-answer-section1\">\n          <div className=\"question-text1\">\n            {question.questionText}\n          </div>\n\n          <div className=\"answer-section1 wahniColor\">\n            {question.options.map((option) => (\n              <div\n                className=\"buttonOne\"\n                id={idNameBasedOnAnswer(option)}\n              >\n                {option}\n              </div>\n            ))}\n            <div\n                className=\"buttonOne showAnswerButton\"\n                id='answerButton1'\n                onClick={() => clickToSeeAnswer1()}\n              >\n                Click to See Answer\n              </div>\n          </div>\n          \n        </div>\n\n      </div>\n            </div>\n    );\n}\n\nexport default QuestionCardGlobal;\n","/home/ahsan/REACT APPS/wahnilogin/src/components/Quiz/quizScreen.js",[],"/home/ahsan/REACT APPS/wahnilogin/src/firebase.js",[],{"ruleId":"165","severity":1,"message":"166","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":27},{"ruleId":"165","severity":1,"message":"169","line":1,"column":40,"nodeType":"167","messageId":"168","endLine":1,"endColumn":51},{"ruleId":"165","severity":1,"message":"170","line":4,"column":7,"nodeType":"167","messageId":"168","endLine":4,"endColumn":18},{"ruleId":"165","severity":1,"message":"171","line":8,"column":7,"nodeType":"167","messageId":"168","endLine":8,"endColumn":19},{"ruleId":"172","severity":1,"message":"173","line":97,"column":6,"nodeType":"174","endLine":97,"endColumn":8,"suggestions":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"176","replacedBy":"180"},{"ruleId":"178","replacedBy":"181"},{"ruleId":"165","severity":1,"message":"182","line":1,"column":20,"nodeType":"167","messageId":"168","endLine":1,"endColumn":24},{"ruleId":"165","severity":1,"message":"183","line":12,"column":12,"nodeType":"167","messageId":"168","endLine":12,"endColumn":18},{"ruleId":"172","severity":1,"message":"184","line":178,"column":6,"nodeType":"174","endLine":178,"endColumn":8,"suggestions":"185"},{"ruleId":"165","severity":1,"message":"186","line":183,"column":10,"nodeType":"167","messageId":"168","endLine":183,"endColumn":15},{"ruleId":"165","severity":1,"message":"187","line":185,"column":10,"nodeType":"167","messageId":"168","endLine":185,"endColumn":19},{"ruleId":"172","severity":1,"message":"188","line":30,"column":6,"nodeType":"174","endLine":30,"endColumn":26,"suggestions":"189"},{"ruleId":"165","severity":1,"message":"190","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},{"ruleId":"165","severity":1,"message":"166","line":1,"column":27,"nodeType":"167","messageId":"168","endLine":1,"endColumn":37},{"ruleId":"165","severity":1,"message":"191","line":1,"column":27,"nodeType":"167","messageId":"168","endLine":1,"endColumn":36},{"ruleId":"165","severity":1,"message":"192","line":23,"column":9,"nodeType":"167","messageId":"168","endLine":23,"endColumn":17},{"ruleId":"165","severity":1,"message":"193","line":141,"column":10,"nodeType":"167","messageId":"168","endLine":141,"endColumn":22},{"ruleId":"165","severity":1,"message":"194","line":141,"column":24,"nodeType":"167","messageId":"168","endLine":141,"endColumn":39},{"ruleId":"165","severity":1,"message":"195","line":142,"column":10,"nodeType":"167","messageId":"168","endLine":142,"endColumn":27},{"ruleId":"165","severity":1,"message":"196","line":142,"column":29,"nodeType":"167","messageId":"168","endLine":142,"endColumn":49},{"ruleId":"176","replacedBy":"197"},{"ruleId":"178","replacedBy":"198"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":38,"nodeType":"167","messageId":"168","endLine":1,"endColumn":48},{"ruleId":"165","severity":1,"message":"199","line":13,"column":5,"nodeType":"167","messageId":"168","endLine":13,"endColumn":12},{"ruleId":"172","severity":1,"message":"200","line":58,"column":6,"nodeType":"174","endLine":58,"endColumn":8,"suggestions":"201"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":27},{"ruleId":"165","severity":1,"message":"169","line":1,"column":40,"nodeType":"167","messageId":"168","endLine":1,"endColumn":51},{"ruleId":"165","severity":1,"message":"202","line":8,"column":7,"nodeType":"167","messageId":"168","endLine":8,"endColumn":28},{"ruleId":"176","replacedBy":"203"},{"ruleId":"178","replacedBy":"204"},{"ruleId":"165","severity":1,"message":"191","line":1,"column":39,"nodeType":"167","messageId":"168","endLine":1,"endColumn":48},{"ruleId":"165","severity":1,"message":"205","line":3,"column":8,"nodeType":"167","messageId":"168","endLine":3,"endColumn":14},{"ruleId":"165","severity":1,"message":"206","line":4,"column":8,"nodeType":"167","messageId":"168","endLine":4,"endColumn":13},{"ruleId":"165","severity":1,"message":"207","line":5,"column":8,"nodeType":"167","messageId":"168","endLine":5,"endColumn":16},{"ruleId":"165","severity":1,"message":"208","line":8,"column":10,"nodeType":"167","messageId":"168","endLine":8,"endColumn":19},{"ruleId":"165","severity":1,"message":"209","line":8,"column":21,"nodeType":"167","messageId":"168","endLine":8,"endColumn":33},{"ruleId":"165","severity":1,"message":"210","line":10,"column":9,"nodeType":"167","messageId":"168","endLine":10,"endColumn":21},{"ruleId":"165","severity":1,"message":"190","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},{"ruleId":"165","severity":1,"message":"166","line":1,"column":27,"nodeType":"167","messageId":"168","endLine":1,"endColumn":37},{"ruleId":"165","severity":1,"message":"166","line":1,"column":26,"nodeType":"167","messageId":"168","endLine":1,"endColumn":36},{"ruleId":"165","severity":1,"message":"191","line":1,"column":38,"nodeType":"167","messageId":"168","endLine":1,"endColumn":47},{"ruleId":"165","severity":1,"message":"211","line":4,"column":8,"nodeType":"167","messageId":"168","endLine":4,"endColumn":26},{"ruleId":"165","severity":1,"message":"212","line":9,"column":20,"nodeType":"167","messageId":"168","endLine":9,"endColumn":28},{"ruleId":"165","severity":1,"message":"213","line":64,"column":9,"nodeType":"167","messageId":"168","endLine":64,"endColumn":19},{"ruleId":"165","severity":1,"message":"214","line":71,"column":9,"nodeType":"167","messageId":"168","endLine":71,"endColumn":24},{"ruleId":"215","severity":1,"message":"216","line":106,"column":11,"nodeType":"217","endLine":106,"endColumn":120},{"ruleId":"176","replacedBy":"218"},{"ruleId":"178","replacedBy":"219"},{"ruleId":"165","severity":1,"message":"166","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":27},{"ruleId":"165","severity":1,"message":"191","line":1,"column":29,"nodeType":"167","messageId":"168","endLine":1,"endColumn":38},{"ruleId":"165","severity":1,"message":"169","line":1,"column":40,"nodeType":"167","messageId":"168","endLine":1,"endColumn":51},{"ruleId":"165","severity":1,"message":"220","line":7,"column":7,"nodeType":"167","messageId":"168","endLine":7,"endColumn":23},{"ruleId":"165","severity":1,"message":"190","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},{"ruleId":"165","severity":1,"message":"191","line":1,"column":39,"nodeType":"167","messageId":"168","endLine":1,"endColumn":48},{"ruleId":"165","severity":1,"message":"221","line":5,"column":10,"nodeType":"167","messageId":"168","endLine":5,"endColumn":25},{"ruleId":"165","severity":1,"message":"222","line":140,"column":17,"nodeType":"167","messageId":"168","endLine":140,"endColumn":22},{"ruleId":"165","severity":1,"message":"223","line":141,"column":17,"nodeType":"167","messageId":"168","endLine":141,"endColumn":29},{"ruleId":"165","severity":1,"message":"224","line":145,"column":17,"nodeType":"167","messageId":"168","endLine":145,"endColumn":28},{"ruleId":"165","severity":1,"message":"225","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":23},{"ruleId":"165","severity":1,"message":"226","line":1,"column":38,"nodeType":"167","messageId":"168","endLine":1,"endColumn":48},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'defaultUser' is assigned a value but never used.","'UserConsumer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onAuthStateChange'. Either include it or remove the dependency array.","ArrayExpression",["227"],"no-native-reassign",["228"],"no-negated-in-lhs",["229"],["228"],["229"],"'Link' is defined but never used.","'random' is defined but never used.","React Hook useEffect has a missing dependency: 'getQuestionsFromFirestore'. Either include it or remove the dependency array.",["230"],"'score' is assigned a value but never used.","'showScore' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'user' and 'userDetails'. Either include them or remove the dependency array.",["231"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'rankings' is assigned a value but never used.","'mostAttempts' is assigned a value but never used.","'setMostAttempts' is assigned a value but never used.","'highestPercentage' is assigned a value but never used.","'setHighestPercentage' is assigned a value but never used.",["228"],["229"],"'submitQ' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'timeOver'. Either include it or remove the dependency array.",["232"],"'AdminQuestionConsumer' is assigned a value but never used.",["228"],["229"],"'Loader' is defined but never used.","'axios' is defined but never used.","'firebase' is defined but never used.","'questions' is assigned a value but never used.","'setQuestions' is assigned a value but never used.","'uniqueRandom' is assigned a value but never used.","'QuestionCardGlobal' is defined but never used.","'setAllQs' is assigned a value but never used.","'colorConst' is assigned a value but never used.","'fontWeightConst' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["228"],["229"],"'QuestionConsumer' is assigned a value but never used.","'QuestionContext' is defined but never used.","'dirty' is assigned a value but never used.","'isSubmitting' is assigned a value but never used.","'handleReset' is assigned a value but never used.","'BrowserRouter' is defined but never used.","'useReducer' is defined but never used.",{"desc":"233","fix":"234"},"no-global-assign","no-unsafe-negation",{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},"Update the dependencies array to be: [onAuthStateChange]",{"range":"241","text":"242"},"Update the dependencies array to be: [getQuestionsFromFirestore]",{"range":"243","text":"244"},"Update the dependencies array to be: [user, userDetails, userDetailsLoading]",{"range":"245","text":"246"},"Update the dependencies array to be: [timeOver]",{"range":"247","text":"248"},[3008,3010],"[onAuthStateChange]",[7348,7350],"[getQuestionsFromFirestore]",[1237,1257],"[user, userDetails, userDetailsLoading]",[1565,1567],"[timeOver]"]