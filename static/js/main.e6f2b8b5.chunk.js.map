{"version":3,"sources":["firebase.js","components/context/user1Context.js","globalComponents/whiteLink.js","globalComponents/loader.js","components/Profile/profile.js","components/Registration/myAccount.js","components/Layout/navbar.js","components/home.js","components/Quiz/questionCard.js","components/Quiz/quizPlay.js","components/Quiz/quizScreen.js","components/Ranking/rankingScreen.js","components/context/questionsContext.js","components/context/adminQcontext.js","components/questionsScreen/showQuestions.js","components/questionsScreen/addDelQs.js","assets/wg.png","components/footer/footer.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","UserContext","React","createContext","UserProvider","Provider","Consumer","UserContextProvider","props","useState","loggedIn","user","setUser","userScores","setUserScores","userDetails","setUserDetails","userLoading","setuserLoading","userScoresLoading","setuserScoresLoading","userDetailsLoading","setuserDetailsLoading","useEffect","unsubscribe","auth","onAuthStateChanged","user1","email","name","displayName","id","uid","number","phoneNumber","photoURL","firestore","collection","where","orderBy","limit","onSnapshot","thisisquery","list","forEach","doc","push","data","err","console","log","docData","value","children","WhiteLink","onClick","className","style","paddingLeft","Loader","width","borderWidth","height","Profile","userContextObject","useContext","profileUpdateIsLoading","setprofileUpdateIsLoading","professionInput","setprofessionInput","addressInput","setaddressInput","completeProfileClicked","setcompleteProfileClicked","undefined","address","profession","fontSize","newName","window","prompt","currentUser","updateProfile","then","res","alert","catch","onEditNameClick","src","alt","onChange","e","target","placeholder","required","marginTop","update","attempt","highestScore","signOut","Login","isloading","setIsLoading","axios","get","response","countryCode","country_calling_code","substring","setInputNumber","error","inputNumber","history","useHistory","setUpRecaptcha","recaptchaVerifier","RecaptchaVerifier","size","callback","onSignInSubmit","appVerifier","signInWithPhoneNumber","confirmationResult","code","confirm","result","location","reload","completeProfile","nameInput","logout","type","Navbar","to","Home","require","QuestionCard","currentQuestion","nextQ","questions","submitQ","duration","setDuration","timeOver","setTimeOver","quizOver","setQuizOver","showScore","setShowScore","isLoading","isLoading1","setIsLoading1","score","setScore","timesRun","interval","setInterval","clearInterval","setTimeout","correctAnswer","setCorrectAnswer","selectedAnswers","setSelectedAnswers","answerClickHandler","answer","indexure","newArray","nextQuestion","getCorrectAnswers","a","q","i","docSnap","answersingle","prevCorrectAnswer","slice","onClickToSeeScore","arrayTest","prevScore","newScore","lastScore","newPercentageIncrease","newAttempt","submitting2firestore","Date","username","userDetails2add","set","createScoreObject2submit2firestore","newScoreObject","add","fontWeight","display","alignItems","fontFamily","marginLeft","questionText","options","map","option","uniqueRandom","setQuestions","list1","randomNumber","randomQuestionNumberArray","randomQuestionsArray","getQuestionsFromFirestore","setCurrentQuestion","letterSpacing","RankingScreen","topScores1","setTopScores1","mostAttempts1","setMostAttempts1","highestPercentage1","setHighestPercentage1","topScoresLoading","setTopScoresLoading","mostAttemptsLoading","setMostAttemptsLoading","highestPercentageLoading","setHighestPercentageLoading","mostAttemptsClicked","setmostAttemptsClicked","topScorersClicked","settopScorersClicked","topPerformersCLicked","settopPerformersCLicked","loginContainer1","headerContainer1","rankTable1","loginContainer2","headerContainer2","rankTable2","loginContainer3","headerContainer3","rankTable3","index","perecentageIncrease","QuestionContext","QuestionProvider","QuestionContextProvider","answerOptions","answerText","isCorrect","qs","setqs","AdminQuestionContext","AdminQuestionProvider","AdminQuestionContextProvider","allQs","setAllQs","ShowQ","correctAnswers","setCorrectAnswers","answerIsLoading","setanswerIsLoading","idNameBasedOnAnswer","QuestionsView","delete","AddDel","addNewQ","newQobject","createdAt","res1","initialValues","questionInput","optionA","optionB","optionC","optionD","correct","onSubmit","values","correctoption","handleFormSubmit1","validationSchema","Yup","shape","min","touched","errors","handleChange","dirty","isSubmitting","handleBlur","handleSubmit","handleReset","onBlur","htmlFor","label","Footer","logo","App","exact","path","component","MyAccount","Quiz","QuizPlay","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6f2b8b5.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\n\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/storage';\r\n\r\n\r\n// import 'firebase/storage';\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBSjXNfUFdgJn3qCJPG3qWd5WEBTBKCICU\",\r\n    authDomain: \"wahnilogin.firebaseapp.com\",\r\n    projectId: \"wahnilogin\",\r\n    storageBucket: \"wahnilogin.appspot.com\",\r\n    messagingSenderId: \"571694906479\",\r\n    appId: \"1:571694906479:web:908412aa21b16453d7619a\"\r\n};\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\nexport default firebase\r\n","import React, { useContext, useEffect, useCallback, useState } from \"react\";\r\nimport firebase from \"../../firebase\";\r\n\r\nconst defaultUser = { loggedIn: false, email: \"\" };\r\nexport const UserContext = React.createContext({});\r\n\r\nconst UserProvider = UserContext.Provider;\r\nconst UserConsumer = UserContext.Consumer;\r\n\r\n// function onAuthStateChange(callback) {\r\n// make sure user register or login\r\n// }\r\n\r\n// user is added or logged in and sent to all the components of this site through this context\r\n\r\nexport function UserContextProvider(props) {\r\n  const [user, setUser] = useState({ loggedIn: false });\r\n  const [userScores, setUserScores] = useState(null);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  // loading\r\n  const [userLoading, setuserLoading] = useState(true);\r\n  const [userScoresLoading, setuserScoresLoading] = useState(false);\r\n  const [userDetailsLoading, setuserDetailsLoading] = useState(false);\r\n\r\n  function onAuthStateChange() {\r\n    setuserLoading(true);\r\n    setuserDetailsLoading(true);\r\n    setuserScoresLoading(true);\r\n\r\n    return firebase.auth().onAuthStateChanged((user1) => {\r\n      if (user1) {\r\n        setUser({\r\n          loggedIn: true,\r\n          email: user1.email,\r\n          name: user1.displayName,\r\n          id: user1.uid,\r\n          number: user1.phoneNumber,\r\n          photoURL: user1.photoURL,\r\n        });\r\n\r\n        setuserLoading(false);\r\n\r\n        firebase\r\n          .firestore()\r\n          .collection(`rankings`)\r\n          .where(\"uid\", \"==\", user1.uid)\r\n          .orderBy(\"attendedAt\", \"desc\")\r\n          .limit(1)\r\n          .onSnapshot(\r\n            (thisisquery) => {\r\n              const list = [];\r\n              thisisquery.forEach((doc) => {\r\n                list.push({ ...doc.data(), id: doc.id });\r\n              });\r\n              setUserScores(list);\r\n              setuserScoresLoading(false);\r\n            },\r\n            (err) => {\r\n              console.log(\"user last score unable to fetch\", err);\r\n              userScoresLoading(false);\r\n            }\r\n          );\r\n        // get user details\r\n        firebase\r\n          .firestore()\r\n          .doc(`users/${user1.uid}`)\r\n          .onSnapshot(\r\n            (docData) => {\r\n              const list = docData.data();\r\n              setUserDetails(list);\r\n              setuserDetailsLoading(false);\r\n            },\r\n            (err) => {\r\n              console.log(\"Unable to fetch user Details\", err);\r\n              setuserDetailsLoading(false);\r\n            }\r\n          );\r\n      } else {\r\n        setUser({ loggedIn: false });\r\n        setUserScores(null);\r\n        setUserDetails(null);\r\n        setuserLoading(false);\r\n        setuserDetailsLoading(false);\r\n        setuserScoresLoading(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  // on useEffect user is authorized and user details are set and sent via context API to all components\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChange();\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <UserProvider\r\n      value={{\r\n        user: user,\r\n        userScores: userScores,\r\n        userDetails: userDetails,\r\n        userLoading: userLoading,\r\n        userScoresLoading: userScoresLoading,\r\n        userDetailsLoading: userDetailsLoading,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </UserProvider>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\nimport './whiteLink.css'\n\nfunction WhiteLink(props) {\n  return (\n      <div onClick={props.onClick} className='linkContainer'>\n      <div\n        className=\"linkContain wahniColor\"\n      >\n          <p style={{ paddingLeft: \"25px\"}}>\n        {props.children}\n        </p>\n      </div>\n      </div>\n  );\n}\n\nexport default WhiteLink;\n","import React, { useState, useContext} from 'react';\nimport './loader.css'\n\nfunction Loader(props) {\n\n    const { width, borderWidth } = props\n\n    return (\n        \n            <div style={{height: width, width: width, borderWidth: borderWidth}} className=\"loader\"></div>\n    );\n}\n\nexport default Loader;\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { UserContext } from \"../context/user1Context\";\r\nimport WhiteLink from '../../globalComponents/whiteLink';\r\nimport firebase from '../../firebase'\r\nimport Loader from \"../../globalComponents/loader\";\r\n\r\nfunction Profile(props) {\r\n  // user details and scores\r\n  const userContextObject = useContext(UserContext);\r\n  const user = userContextObject.user;\r\n  const userScores = userContextObject.userScores;\r\n  const userDetails = userContextObject.userDetails;\r\n  const userDetailsLoading = userContextObject.userDetailsLoading;\r\n  // profileUpdateIsLoading\r\n  const [profileUpdateIsLoading, setprofileUpdateIsLoading] = useState(false)\r\n  // inputs\r\n  const [professionInput, setprofessionInput] = useState('')\r\n  const [addressInput, setaddressInput] = useState('')\r\n\r\n  \r\n  // complete profile\r\nconst [completeProfileClicked, setcompleteProfileClicked] = useState(false)\r\n  useEffect(() => {\r\n    if(user && !userDetailsLoading && (userDetails !== undefined)) {\r\n      if ((userDetails.address !== null) && (userDetails.address !== undefined)) {\r\n        setaddressInput(userDetails.address);\r\n      setprofessionInput(userDetails.profession)\r\n      }\r\n    }\r\n  }, [userDetailsLoading]);\r\n\r\n  const username = () => {\r\n    \r\n    if (user.name === null || user.name === undefined || user.name === '') {\r\n      return (\r\n        <p style={{ fontSize: \"24px\" }}>\r\n        <b>Guest</b>\r\n        </p>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <p style={{ fontSize: \"24px\" }}>\r\n        {user.name}<b>{user.name}</b>\r\n        </p>\r\n      )\r\n    }\r\n  };\r\n  const numberOfTries = () => {\r\n    if(userScores !== null && userScores !== undefined && (userScores.length > 0)) {\r\n      return  userScores[0].attempt\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n  const highScore = () => {\r\n    if(userDetails !== null && userDetails !== undefined) {\r\n      if ((userDetails.highestScore !== null) || (userDetails.highestScore !== undefined)) {\r\n        return userDetails.highestScore\r\n      } else {\r\n        return 0\r\n      }\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  function onEditNameClick() {\r\n    var newName = window.prompt(\"Enter your new name\", user.name);\r\n    if(newName === null) {\r\n      return;\r\n    }\r\n    else if (newName !== user.name) {\r\n      setprofileUpdateIsLoading(true)\r\n      firebase\r\n          .auth()\r\n          .currentUser\r\n          .updateProfile({\r\n            displayName: newName\r\n          })\r\n          .then(res => {\r\n            window.alert('Your Profile has been Updated')\r\n            setprofileUpdateIsLoading(false)\r\n          })\r\n          .catch(err => {\r\n            window.alert('Unable to update', err)\r\n            setprofileUpdateIsLoading(false)\r\n          });\r\n        }\r\n    \r\n  }\r\n\r\n  function logout() {\r\n    //on log out click inside <Profile />\r\n      firebase.auth().signOut();\r\n    }\r\n\r\n  function onCompleteProfileClicked() {\r\n    if(completeProfileClicked) {\r\n      setcompleteProfileClicked(false)\r\n    } else {\r\n      setcompleteProfileClicked(true)\r\n    }\r\n  }\r\n\r\n  const updateORview = () => {\r\n    if (completeProfileClicked) {\r\n      return 'View'\r\n    } else {\r\n      return 'Update'\r\n    }\r\n  }\r\n\r\n  function updateProfile() {\r\n    if(profileUpdateIsLoading) {\r\n      window.alert('Updation in progress')\r\n    } else {\r\n      if (addressInput !== '' && professionInput !== '') {\r\n        if (addressInput !== userDetails.address || professionInput !== userDetails.profession) {\r\n          setprofileUpdateIsLoading(true)\r\n          firebase\r\n          .firestore()\r\n          .doc(`users/${user.id}`)\r\n          .update({\r\n            'address': addressInput,\r\n            'profession' : professionInput,\r\n          })\r\n          .then(res => {\r\n            window.alert('Your profile has been Updated');\r\n            setprofileUpdateIsLoading(false)\r\n          })\r\n          .catch(err => {\r\n            window.alert('Coudnot update your profile', err);\r\n            setprofileUpdateIsLoading(false)\r\n          })\r\n        } else {\r\n          window.alert('No changes detected')\r\n        }\r\n      } else {\r\n        window.alert('Both fields cannot be empty')\r\n      }\r\n    }\r\n  }\r\n  //check if user object has a name\r\n  //if NO name, complete registration form is shown else Profile is shown\r\n\r\n  return (\r\n    <div className=\"body fontMontserrat\">\r\n      <div className=\"cardOne wahniBgColor flexCenter\" id=\"profileHeight\">\r\n        {\r\n          completeProfileClicked ? \r\n          null\r\n          :\r\n          <div className=\"profileBoxes profileBox1\">\r\n          <div>\r\n          {username()}\r\n          </div>\r\n          <div className='editButtonContainer'>\r\n          <img onClick={() => onEditNameClick()} src='https://www.iconsdb.com/icons/preview/white/edit-xxl.png' alt=\"Edit Name\" />\r\n          </div>\r\n          <div>\r\n          <p id=\"phoneNumber\">{user.number}</p>\r\n          </div>\r\n        </div>\r\n        }\r\n\r\n        {\r\n          completeProfileClicked ? \r\n          \r\n          <div className='completeProfileInputContain'>\r\n            <div className=\"numberInputContainer\">\r\n          <p>Profession <b>or Qualification</b></p>\r\n          <input\r\n            className=\"numberInput fontMontserrat\"\r\n            value={professionInput}\r\n            onChange={(e) => setprofessionInput(e.target.value)}\r\n            // type=\"number\"\r\n            placeholder='e.g. Student / B.Tech'\r\n            name=\"mobile\"\r\n            required={true}\r\n          />\r\n        </div>\r\n        <div style={{marginTop: '8px'}} className=\"numberInputContainer\">\r\n          <p>Your <b>Address</b></p>\r\n          <input\r\n            className=\"numberInput fontMontserrat\"\r\n            value={addressInput}\r\n            onChange={(e) => setaddressInput(e.target.value)}\r\n            // type=\"number\"\r\n            placeholder='e.g. Kechery, Thrissur - P.O 680519'\r\n            name=\"mobile\"\r\n            required={true}\r\n          />\r\n        </div>\r\n        <div onClick={() => updateProfile()} className='updateProfileButton wahniColor'>\r\n        {\r\n          profileUpdateIsLoading ? \r\n          <Loader borderWidth='3px' width='10px'/>\r\n          :\r\n          <p><b>Update</b> Profile</p>\r\n        }\r\n        {/* <img onClick={() => onEditNameClick()} src='https://www.iconsdb.com/icons/preview/white/save-as-xxl.png' alt=\"\" /> */}\r\n        </div>\r\n          </div>\r\n\r\n          :\r\n\r\n          <div className=\"profileBoxes profileBox2\">\r\n          <div className=\"profileBox2singleRow\">\r\n            <p>\r\n              Number of <b>Tries</b>\r\n            </p>\r\n            <p>\r\n              <b>{numberOfTries()}</b>\r\n            </p>\r\n          </div>\r\n          <div className=\"profileBox2singleRow\">\r\n            <p>\r\n              High<b>score</b>\r\n            </p>\r\n            <p>\r\n              <b>{highScore()}</b>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        }\r\n        <img className='logOutIcon' onClick={() => logout()} src='https://www.iconsdb.com/icons/preview/white/logout-xxl.png' alt=\"Logout\" />\r\n      </div>\r\n      <WhiteLink onClick={() => onCompleteProfileClicked(true)}>\r\n        <b>{updateORview()}</b> Your Profile\r\n      </WhiteLink>\r\n      <WhiteLink>\r\n        <b>Go to</b> Quiz\r\n      </WhiteLink>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport Profile from \"../Profile/profile\";\r\nimport firebase from \"../../firebase\";\r\nimport { UserContext } from \"../context/user1Context\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Loader from '../../globalComponents/loader'\r\n\r\nimport \"./myAccount.css\";\r\n\r\nfunction Login() {\r\n\r\n  const [isloading, setIsLoading] = useState(false)\r\n  // on Component load fetch the country code based on the ip address and set input field\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://ipapi.co/json/\")\r\n      .then((response) => {\r\n        let data = response.data;\r\n        const countryCode = data.country_calling_code.substring(1);\r\n        setInputNumber(`${countryCode}`);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  // confirm if user is available\r\n  // user details and scores\r\n  const userContextObject = useContext(UserContext);\r\n  const user = userContextObject.user;\r\n  const userLoading = userContextObject.userLoading;\r\n  //  input for mobile number\r\n  const [inputNumber, setInputNumber] = useState(\"\");\r\n  // useHistory hook to redirect to '/Quiz' on login if registration is complete\r\n  const history = useHistory();\r\n\r\n  //Registration, Verifying Captcha and OTP validation START\r\n  const setUpRecaptcha = () => {\r\n\r\n    window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\r\n      \"recaptcha-container\",\r\n      {\r\n        size: \"normal\",\r\n        callback: function (response) {\r\n\r\n          // reCAPTCHA solved, allow signInWithPhoneNumber.\r\n          setIsLoading(false)\r\n          onSignInSubmit();\r\n        },\r\n      }\r\n    );\r\n       \r\n  };\r\n\r\n  const onSignInSubmit = (number, name) => {\r\n    setIsLoading(true)\r\n    setUpRecaptcha();\r\n    // var phoneNumber = getPhoneNumberFromUserInput();\r\n    var phoneNumber = \"+\" + number;\r\n    var appVerifier = window.recaptchaVerifier;\r\n    firebase\r\n      .auth()\r\n      .signInWithPhoneNumber(phoneNumber, appVerifier)\r\n      .then(function (confirmationResult) {\r\n        // SMS sent. Prompt user to type the code from the message, then sign the\r\n        // user in with confirmationResult.confirm(code).\r\n        console.log(\"get OTP initiated\");\r\n\r\n        // afterGETotp(confirmationResult)\r\n\r\n        window.confirmationResult = confirmationResult;\r\n        // step4\r\n        var code = window.prompt(\"Password has been sent to your device\");\r\n        // var code = getCodeFromUserInput();\r\n        confirmationResult\r\n          .confirm(code)\r\n          .then(function (result) {\r\n            // User signed in successfully.\r\n\r\n            var user1 = firebase.auth().currentUser;\r\n            if (user1.displayName !== null || user1.displayName === \"\") {\r\n              history.push(\"/Quiz\");\r\n            }\r\n\r\n            setInputNumber(\"\");\r\n            // ...\r\n          })\r\n          .catch(function (error) {\r\n            // User couldn't sign in (bad verification code?)\r\n            // ...\r\n            alert(error);\r\n            window.location.reload();\r\n          });\r\n      })\r\n      .catch(function (error) {\r\n        // Error; SMS not sent\r\n        alert(error);\r\n        window.location.reload();\r\n      });\r\n  };\r\n  //Registration, Verifying Captcha and OTP validation END\r\n\r\n  function CompleteProfile(nameInput) {\r\n      //on submitting FORM in complete registration form in <Profile />\r\n    firebase\r\n      .auth()\r\n      .currentUser.updateProfile({ displayName: nameInput })\r\n      .then(function () {\r\n        history.push(\"/Quiz\");\r\n        window.location.reload();\r\n      });\r\n  }\r\n\r\n  function logout() {\r\n  //on log out click inside <Profile />\r\n    firebase.auth().signOut();\r\n  }\r\n\r\n  // if user is logged in we show PROFILE else we show LOGIN\r\n\r\n  if (user && user.loggedIn) {\r\n    return (\r\n      <Profile completeProfile={CompleteProfile} user={user} logout={logout} />\r\n    );\r\n  }\r\n  else if (userLoading) {\r\n    return (\r\n      <div className='body flexCenter'>\r\n        <Loader width='50px' borderWidth='5px' />\r\n      </div>\r\n    )\r\n  }\r\n  else {\r\n    \r\n    return (\r\n      <div className=\"body\">\r\n       \r\n\r\n        <div className=\"cardOne flexCenter cardOneAdd fontMontserrat\">\r\n          <div className='blank100'></div>\r\n          <div className='loginSection'>\r\n          <p className=\"headerLogin fontMontserrat\">L O G I N</p>\r\n            <div className=\"numberInputContainer\">\r\n              <p>enter <b>mobile number</b></p>\r\n              <input\r\n                className=\"numberInput fontMontserrat\"\r\n                value={inputNumber}\r\n                onChange={(e) => setInputNumber(e.target.value)}\r\n                type=\"number\"\r\n                placeholder='e.g. 919564458759'\r\n                name=\"mobile\"\r\n                required={true}\r\n              />\r\n            </div>\r\n\r\n\r\n\r\n            {!isloading ? \r\n              <div\r\n              className=\"signInButton wahniBgColor flexCenter\"\r\n              type=\"button\"\r\n              onClick={() => onSignInSubmit(inputNumber)}\r\n            >\r\n              SIGN IN\r\n            </div>\r\n            : \r\n            <div\r\n              className=\"signInButton wahniBgColor flexCenter\"\r\n              type=\"button\"\r\n              onClick={() => { if (window.confirm('Verification in progress. Are you sure you want to cancel ?')) window.location.reload();} }\r\n              >\r\n              <Loader width='15px' borderWidth='3px' />\r\n            </div>\r\n            }\r\n            \r\n\r\n          </div>\r\n          <div className='flexCenter' id=\"recaptcha-container\"></div>\r\n\r\n  \r\n            \r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './navbar.css'\r\n\r\nfunction Navbar() {\r\n   \r\n    return (\r\n        <div>\r\n        <nav className=\"navContainer\">\r\n            <Link to='/myAccount' className=\"navLinks\">My Account</Link>\r\n            <Link to='/Quiz' className=\"navLinks\">Quiz</Link>\r\n        </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Navbar","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { UserContext } from \"./context/user1Context\";\r\nimport Loader from \"../globalComponents/loader\";\r\nimport axios from \"axios\";\r\nimport firebase from '../firebase'\r\n\r\nfunction Home() {\r\n  const [questions, setQuestions] = useState(\"\");\r\n\r\n  const uniqueRandom = require('unique-random');\r\n\r\n  const userContextObject = useContext(UserContext);\r\n\r\n  // function getRandomNumber(min, max) {\r\n  //   return Math.ceil(Math.random() * (max - min) + min);\r\n  // }\r\n\r\n  // async function getQuestionsFromFirestore() {\r\n  //   // fetch the last added question doc from firestore\r\n  //   console.log('started getting 1st document')\r\n  //   firebase\r\n  //     .firestore()\r\n  //     .collection(\"questions\")\r\n  //     .orderBy(\"createdAt\", \"desc\")\r\n  //     .limit(1)\r\n  //     .get()\r\n  //     .then((docData) => {\r\n  //       const list1 = [];\r\n  //       docData.forEach((doc) => {\r\n  //         list1.push({ ...doc.data(), id: doc.id });\r\n  //       });\r\n  //       console.log(`got 1st doc with index : ${list1[0].index}`)\r\n  //       // check if list has an object with index\r\n  //       if (list1.length > 0) {\r\n  //         const totalQuestions = list1[0].index;\r\n\r\n  //         // check if total questions is below 10 or 100 or 1000\r\n  //         const divisibleNumber = () => {\r\n  //           if (totalQuestions < 10) {\r\n  //             return 10;\r\n  //           } else if (totalQuestions < 100) {\r\n  //             return 10;\r\n  //           } else if (totalQuestions < 1000) {\r\n  //             return 100;\r\n  //           } else if (totalQuestions < 10000) {\r\n  //             return 1000;\r\n  //           }\r\n  //         };\r\n  //         console.log(`disvisible number : ${divisibleNumber()}`)\r\n  //         const randomNumbersArrayLength =\r\n  //           Math.floor(totalQuestions / divisibleNumber()) + 1;\r\n\r\n  //         console.log(`randomNumbersArrayLength: ${randomNumbersArrayLength}`)\r\n  //         // get a random number between 1 and random numbers array length\r\n          \r\n  //         const aRandomNumber = getRandomNumber(0.5, randomNumbersArrayLength);\r\n\r\n  //         console.log(`random: ${aRandomNumber}`)\r\n\r\n  //         // based on this random number generated, get questions\r\n  //         if (aRandomNumber < randomNumbersArrayLength) {\r\n  //           console.log(`fetching docs less than multiple of 10`)\r\n  //           firebase\r\n  //             .firestore()\r\n  //             .collection(\"questions\")\r\n  //             .where(\"index\", \"<=\", aRandomNumber * divisibleNumber())\r\n  //             .limit(divisibleNumber())\r\n  //             .get()\r\n  //             .then((docData2) => {\r\n  //               console.log(`number of docs fetched: ${aRandomNumber * divisibleNumber()}`)\r\n  //               const list2 = [];\r\n  //               docData2.forEach((doc) => {\r\n  //                 list2.push({ ...doc.data(), id: doc.id });\r\n  //               });\r\n  //               // randomise list\r\n  //               const randomNumber = uniqueRandom(1, list2.length-1);\r\n  //               const newArray = [randomNumber(), randomNumber(), randomNumber(), randomNumber(), randomNumber()]\r\n  //               const newQuestionsArray = [];\r\n  //               for (let i = 0; i < newArray.length; i++) {\r\n  //                 console.log(`added ${i} questions with index ${newArray[i]}`)\r\n  //                 newQuestionsArray.push(list2[newArray[i]])\r\n  //               }\r\n  //               setQuestions(newQuestionsArray);\r\n  //               // setIsLoading(false);\r\n  //             })\r\n  //             .catch((err) => {\r\n  //               // history.push(\"/Quiz\");\r\n  //               window.alert(\"couldnt fetch questions\");\r\n  //             });\r\n  //         } else {\r\n  //           console.log(`fetching docs after: index ${(aRandomNumber - 1) * divisibleNumber()} `)\r\n  //           firebase\r\n  //             .firestore()\r\n  //             .collection(\"questions\")\r\n  //             .where(\"index\", \">=\", (aRandomNumber - 1) * divisibleNumber())\r\n  //             .limit(divisibleNumber())\r\n  //             .get()\r\n  //             .then((docData3) => {\r\n  //               const list3 = [];\r\n  //               docData3.forEach((doc) => {\r\n  //                 list3.push({ ...doc.data(), id: doc.id });\r\n  //               });\r\n  //               if (list3.length < 5) {\r\n  //                 console.log(`if fetched docs are low : ${list3.length}`)\r\n  //                 firebase\r\n  //                   .firestore()\r\n  //                   .collection(\"questions\")\r\n  //                   .where(\r\n  //                     \"index\",\r\n  //                     \"<\",\r\n  //                     (aRandomNumber - 1) * divisibleNumber()\r\n  //                   )\r\n  //                   .limit(divisibleNumber())\r\n  //                   .get()\r\n  //                   .then((thisisquery1) => {\r\n  //                     thisisquery1.forEach((doc) => {\r\n  //                       list3.push({ ...doc.data(), id: doc.id });\r\n  //                     });\r\n  //                     console.log(`fetched even more docs : ${list3.length}`)\r\n\r\n  //                     // randomise list \r\n  //                     const randomNumber3a = uniqueRandom(1, list3.length -1);\r\n  //               const newArray3a = [randomNumber3a(), randomNumber3a(), randomNumber3a(), randomNumber3a(), randomNumber3a()]\r\n  //               console.log(`randomeNumbers are: ${newArray3a}`)\r\n  //               const newQuestionsArray3a = [];\r\n  //               for (let i = 0; i < newArray3a.length; i++) {\r\n  //                 newQuestionsArray3a.push(list3[newArray3a[i]])\r\n  //               }\r\n  //                     setQuestions(newQuestionsArray3a);\r\n  //                     // setIsLoading(false);\r\n  //                   })\r\n  //                   .catch((err) => {\r\n  //                     // history.push(\"/Quiz\");\r\n  //                     window.alert(\"couldnt fetch questions\");\r\n  //                   });\r\n  //               } else {\r\n  //                 console.log(`if fetched docs are enough : ${list3.length}`)\r\n\r\n  //                 // randomise list\r\n  //               const randomNumber3 = uniqueRandom(1, list3.length-1);\r\n  //               const newArray3 = [randomNumber3(), randomNumber3(), randomNumber3(), randomNumber3(), randomNumber3()]\r\n  //               const newQuestionsArray3 = [];\r\n  //               for (let i = 0; i < newArray3.length; i++) {\r\n  //                 newQuestionsArray3.push(list3[newArray3[i]])\r\n  //               }\r\n  //                 setQuestions(newQuestionsArray3);\r\n  //                 // setIsLoading(false);\r\n  //               }\r\n  //             })\r\n  //             .catch((err) => {\r\n  //               // history.push(\"/Quiz\");\r\n  //               window.alert(\"couldnt fetch questions\");\r\n  //             });\r\n  //         }\r\n  //       }\r\n  //     })\r\n  //     .catch(err => {\r\n  //       window.alert('Unable to Reach backend', err)\r\n  //     });\r\n  // }\r\n\r\n  // useEffect(() => {\r\n  //   // on component load, from the qs, array the questions are shuffled and randomized\r\n  //   getQuestionsFromFirestore();\r\n  // }, []);\r\n\r\n  function clickHandler() {\r\n\r\n    console.log(userContextObject)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>WahniHome</h1>\r\n      <button onClick={() => clickHandler()}>fetch</button>\r\n      {/* <QuestionCardGlobal /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport firebase from \"../../firebase\";\r\nimport Loader from \"../../globalComponents/loader\";\r\n\r\n\r\nfunction QuestionCard(props) {\r\n\r\n  //from props\r\n  const {\r\n    currentQuestion,\r\n    nextQ,\r\n    submitQ,\r\n    questions,\r\n    // users from context\r\n    user,\r\n    userScores\r\n  } = props;\r\n  // duration to track timer\r\n  const [duration, setDuration] = useState(30);\r\n  //check if time is OVER\r\n  const [timeOver, setTimeOver] = useState(false);\r\n  //check if quiz is over\r\n  const [quizOver, setQuizOver] = useState(false);\r\n  //check if show score is true\r\n  const [showScore, setShowScore] = useState(false);\r\n  //check if something is loading\r\n  // check if first firebase operation is loading\r\n  //basically there are two firebase calls here\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // check if second firebase opretion is loading\r\n  const [isLoading1, setIsLoading1] = useState(false);\r\n  // calculate score \r\n  const [score, setScore] = useState(0)\r\n\r\n  useEffect(() => {\r\n    var timesRun = 0;\r\n    const interval = setInterval(() => {\r\n      if (!timeOver) {\r\n        setDuration((duration) => duration - 1);\r\n        timesRun += 1;\r\n        if(timesRun === 30){\r\n        clearInterval(interval);\r\n    }\r\n      } else {\r\n        clearInterval(interval)\r\n      }\r\n    }, 1000);\r\n\r\n    setTimeout(() => {\r\n      setTimeOver(true);\r\n      setDuration(\"TIME OUT\");\r\n\r\n    }, 30000);\r\n\r\n    return () => clearInterval(interval);\r\n\r\n  }, []);\r\n\r\n  \r\n\r\n  // set an array of correct answers\r\n  const [correctAnswer, setCorrectAnswer] = useState([0,0,0,0,0]);\r\n\r\n  // set an array of answers that are selected\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n\r\n  function answerClickHandler(answer, indexure) {\r\n    // set selectedAnswers arrays each time an answer is selected\r\n    const newArray = [...selectedAnswers];\r\n    newArray[indexure] = answer;\r\n    setSelectedAnswers(newArray);\r\n\r\n    // navigate to next Question\r\n    let nextQuestion = currentQuestion + 1;\r\n    if (nextQuestion < questions.length) {\r\n      nextQ(nextQuestion);\r\n    } else {\r\n      setQuizOver(true)\r\n      setIsLoading(true)\r\n      // submit answers\r\n      getCorrectAnswers();\r\n    }\r\n  }\r\n\r\n  async function getCorrectAnswers() {\r\n    \r\n    //loop over questions and get the answers\r\n    await questions.forEach((q,i) => {\r\n      \r\n\r\n      firebase\r\n      .firestore()\r\n      .doc(`answers/${q.id}`)\r\n      .get()\r\n      .then(docSnap => {\r\n        const answersingle = docSnap.data().answer;\r\n        // set correct answers array\r\n        setCorrectAnswer(prevCorrectAnswer => [...prevCorrectAnswer.slice(0,i), answersingle, ...prevCorrectAnswer.slice(i+1,3)]);\r\n        // if everything is over set quiz over to true\r\n        if(i === questions.length-1) {\r\n          setIsLoading(false)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        setIsLoading(false)\r\n        window.alert('Error fetching answers from firestore')\r\n\r\n      })\r\n    })\r\n  }\r\n\r\n  function onClickToSeeScore() {\r\n    let arrayTest = []\r\n    for (let i = 0; i < questions.length; i++) {\r\n      if(selectedAnswers[i] === correctAnswer[i]) {\r\n        setScore(prevScore => prevScore + 1)\r\n        arrayTest.push('correct')\r\n      }\r\n    }\r\n    setIsLoading(true);\r\n    setIsLoading1(true);\r\n    setShowScore(true);\r\n    // send to firestore\r\n    if (user && user.loggedIn) {\r\n      createScoreObject2submit2firestore(arrayTest.length);\r\n    } else {\r\n      window.alert('You are not logged In')\r\n      setIsLoading(false)\r\n    }\r\n    \r\n  }\r\n\r\n  function createScoreObject2submit2firestore(newScore) {\r\n    //if not first time\r\n    if (user && userScores.length > 0) {\r\n      const lastScore = userScores[0].score;\r\n      \r\n      const newPercentageIncrease = () => {\r\n        if(lastScore === 0) {\r\n          return newScore*100\r\n        } else {\r\n          return (newScore-lastScore)/lastScore*100;\r\n        }\r\n      } \r\n      const newAttempt = userScores[0].attempt + 1;\r\n      // set scores\r\n      let newScoreObject = {\r\n        'uid': user.id,\r\n        'username': user.name,\r\n        'score': newScore,\r\n        'attempt': newAttempt,\r\n        'perecentageIncrease': newPercentageIncrease(),\r\n        'attendedAt': new Date()\r\n      }\r\n      submitting2firestore(newScoreObject)\r\n\r\n      // update userDetails\r\n      if (newScore > lastScore) {\r\n        firebase.firestore()\r\n        .doc(`users/${user.id}`)\r\n        .update({\r\n          'highestScore': newScore,\r\n          'attempt': newAttempt,\r\n          'updatedAt': new Date()\r\n        })\r\n        .then(res => {\r\n          setIsLoading1(false)\r\n          console.log('high score updated')\r\n        })\r\n        .catch(err => {\r\n          window.alert('unable to update your profile:', err)\r\n          setIsLoading1(false)\r\n        })\r\n      } else {\r\n        setIsLoading1(false)\r\n      }\r\n    \r\n    }\r\n    // if first time\r\n    else {\r\n      const username = () => {\r\n        if (user.name === null || user.name === undefined || user.name === '') {\r\n          return user.name\r\n        }\r\n        else {\r\n          return 'Guest'\r\n        }\r\n      };\r\n      // set scores\r\n      let newScoreObject = {\r\n        'uid': user.id,\r\n        'username': username(),\r\n        'score': newScore,\r\n        'attempt': 1,\r\n        'perecentageIncrease': null,\r\n        'attendedAt': new Date(),\r\n      };\r\n      submitting2firestore(newScoreObject);\r\n\r\n      // also add user details\r\n      let userDetails2add = {\r\n        'username': user.name,\r\n        'uid': user.id,\r\n        'totalAttempts': 1,\r\n        'highestScore': newScore,\r\n        'updatedAt': new Date(),\r\n      }\r\n      firebase\r\n      .firestore()\r\n      .doc(`users/${user.id}`)\r\n      .set(userDetails2add)\r\n      .then(res => {\r\n        setIsLoading1(false)\r\n        console.log('new user details ADDED')\r\n      })\r\n      .catch(err => {\r\n        window.alert('Unable to update your Profile :', err)\r\n        setIsLoading1(false)\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  function submitting2firestore(newScoreObject) {\r\n    firebase\r\n      .firestore()\r\n      .collection('rankings')\r\n      .add(newScoreObject)\r\n      .then(res => {\r\n        \r\n        console.log('added to rankings')\r\n\r\n        setIsLoading(false)\r\n      })\r\n      .catch(err => {\r\n        console.log('error')\r\n\r\n        window.alert('Error updating the rankings')\r\n        setIsLoading(false)\r\n      })\r\n  }\r\n\r\n\r\n  if (quizOver && !showScore) {\r\n    return (\r\n      <div className=\"flexContainFull flexCenter fontMontserrat\">\r\n        {\r\n          isLoading ? \r\n          <Loader width='50px' borderWidth='6px' />\r\n          :\r\n          <div className=\"timeOutContainer\">\r\n          <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>You have completed the Quiz</p>\r\n          <div\r\n            className=\"buttonOne wahniColor retryButton\"\r\n            onClick={() =>\r\n              onClickToSeeScore()\r\n            }\r\n          >\r\n            Click to see Score\r\n          </div>\r\n        </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n  if (timeOver && !showScore && !quizOver) {\r\n    return (\r\n      <div className=\"flexContainFull flexCenter fontMontserrat\">\r\n        \r\n        <div className=\"timeOutContainer\">\r\n          <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>TIMEOUT</p>\r\n          <div\r\n            className=\"buttonOne wahniColor retryButton\"\r\n            onClick={() =>\r\n              onClickToSeeScore()\r\n            }\r\n          >\r\n            Click to see Score\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  if ((timeOver && showScore) || showScore || (quizOver && showScore)) {\r\n    return (\r\n      <div className=\"flexContainFull flexCenter\">\r\n        {(isLoading || isLoading1) ? \r\n\r\n        <Loader width='50px' borderWidth='6px' />\r\n\r\n          :\r\n\r\n          <div className=\"scoreContainer\">\r\n          <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n            Congratulations\r\n          </p>\r\n          <p style={{ fontSize: \"18px\" }}>You scored</p>\r\n          <div className=\"scoreNumber\">\r\n            <p style={{ fontSize: \"40px\", fontWeight: \"bold\" }}>{score}</p>\r\n            <p\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                marginTop: 15,\r\n                fontSize: \"22px\",\r\n                fontFamily: \"sans-serif\",\r\n                marginLeft: 5,\r\n              }}\r\n            >\r\n              / {questions.length}\r\n            </p>\r\n          </div>\r\n          <Link className=\"link buttonOne wahniColor retryButton\" to=\"/Quiz\">\r\n            Retry\r\n          </Link>\r\n        </div>\r\n\r\n      }\r\n        \r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"flexContainFull fontMontserrat\">\r\n        <div>\r\n          <div className=\"question-count-timer\">\r\n            <span className=\"question-count\">#{currentQuestion + 1}</span>\r\n\r\n            <div className=\"timer\">\r\n              <div>{duration}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"questionHeadText\">Question</div>\r\n        </div>\r\n\r\n        <div className=\"question-and-answer-section\">\r\n          <div className=\"question-text\">\r\n            {questions[currentQuestion].questionText}\r\n          </div>\r\n\r\n          <div className=\"answer-section wahniColor\">\r\n            {questions[currentQuestion].options.map((option) => (\r\n              <div\r\n                className=\"buttonOne\"\r\n                id=\"answerButton\"\r\n                onClick={() => {\r\n                  answerClickHandler(\r\n                    option,\r\n                    currentQuestion\r\n                  );\r\n                }}\r\n              >\r\n                {option}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionCard;\r\n","import { Redirect, Link } from \"react-router-dom\";\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport { UserContext } from \"../context/user1Context\";\r\nimport \"./quizScreen.css\";\r\nimport QuestionCard from \"./questionCard\";\r\nimport Loader from \"../../globalComponents/loader\";\r\nimport firebase from \"../../firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Home() {\r\n  const uniqueRandom = require('unique-random');\r\n  function random(range) {\r\n    return uniqueRandom(1, range)\r\n  }\r\n  // user details and scores\r\n  const userContextObject = useContext(UserContext);\r\n  const user = userContextObject.user;\r\n  const userScores = userContextObject.userScores;\r\n  const userScoresLoading = userContextObject.userScoresLoading;\r\n  const userDetailsLoading = userContextObject.userDetailsLoading;\r\n  // shuffled questions\r\n  const [questions, setQuestions] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  // useHistory hook to redirect to '/Quiz' on login if registration is complete\r\n  const history = useHistory();\r\n\r\n  function getRandomNumber(min, max) {\r\n    return Math.ceil(Math.random() * (max - min) + min);\r\n  }\r\n\r\n  async function getQuestionsFromFirestore() {\r\n    // fetch the last added question doc from firestore\r\n    console.log('started getting 1st document')\r\n    firebase\r\n      .firestore()\r\n      .collection(\"questions\")\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      // .limit(1)\r\n      .get()\r\n      .then((docData) => {\r\n        const list1 = [];\r\n        docData.forEach((doc) => {\r\n          list1.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        const randomNumber = uniqueRandom(1, list1.length-1);\r\n                const randomQuestionNumberArray = [randomNumber(), randomNumber(), randomNumber(), randomNumber(), randomNumber()]\r\n                const randomQuestionsArray = [];\r\n\r\n                if(list1.length >= 5) {\r\n                  for (let i = 0; i < randomQuestionNumberArray.length; i++) {\r\n                    console.log(`added ${i} questions with index ${randomQuestionNumberArray[i]}`)\r\n                    randomQuestionsArray.push(list1[randomQuestionNumberArray[i]])\r\n                  }\r\n  \r\n                  setQuestions(randomQuestionsArray);\r\n                  setIsLoading(false)\r\n                } else {\r\n                  history.push(\"/Quiz\");\r\n                      window.alert(\"not enough questions\");\r\n                }\r\n      })\r\n      .catch(err => {\r\n        window.alert('Unable to Reach backend', err)\r\n        history.push(\"/Quiz\");\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    getQuestionsFromFirestore();\r\n  }, [])\r\n\r\n  // question Index to be shown to the user\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  // calculate scores=\r\n  const [score, setScore] = useState(0);\r\n  // when timeOut or onSubmit the score is shown (showscore set to true)\r\n  const [showScore, setShowScore] = useState(false);\r\n\r\n  // fetch score hsitory of user from backend to send both score and percentage increase to backend for rankings\r\n\r\n  function nextQ(nextQuestion) {\r\n    setCurrentQuestion(nextQuestion);\r\n\r\n    // const nextQuestion = currentQuestion + 1;\r\n    // if (nextQuestion < questions.length) {\r\n    // }\r\n  }\r\n\r\n  function submitQ(score) {\r\n    setScore(score);\r\n    setShowScore(true);\r\n\r\n    // score with user id is sent to backEnd to store with new Date()\r\n  }\r\n\r\n  // if there is no user logged in this is redirected to myAccount for login or register\r\n  if (!user || !user.loggedIn) return <Redirect to=\"/myAccount\" />;\r\n\r\n  if (user && !isLoading && !userScoresLoading && !userDetailsLoading) {\r\n    return (\r\n      <div className=\"body\">\r\n        <div className=\"questionDiv\">\r\n          <QuestionCard\r\n            currentQuestion={currentQuestion}\r\n            nextQ={nextQ}\r\n            submitQ={submitQ}\r\n            questions={questions}\r\n            user={user}\r\n            userScores={userScores}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (\r\n    (user && isLoading) ||\r\n    (user && userScoresLoading) ||\r\n    (user && userDetailsLoading)\r\n  ) {\r\n    return (\r\n      <div className=\"flexCenter body\">\r\n        <Loader borderWidth=\"5px\" width=\"50px\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import { Link } from \"react-router-dom\";\r\nimport React, { useContext } from \"react\";\r\nimport \"./quizScreen.css\";\r\nimport { UserContext } from \"../context/user1Context\";\r\n\r\nfunction Home() {\r\n  // user details and scores\r\n  const userContextObject = useContext(UserContext);\r\n  const user = userContextObject.user;\r\n  // 3 icons' linking to play, rankings and admin dashboard to add questions only for admin\r\n\r\n  function alertIfnotLoggedIn() {\r\n    if (!user || !user.loggedIn) {\r\n      window.alert('Log in to attend the Quiz')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"flex1 quizScreenContainer fontMontserrat\">\r\n        <div className=\"linksContainer\">\r\n          <Link onClick={() => alertIfnotLoggedIn()} className=\"singleLinkContainer link link1\" to=\"/Quiz/play\">\r\n            <div>\r\n              <p style={{ fontSize: 18, letterSpacing: \"0.05em\" }}>Take the</p>\r\n              <p style={{ fontSize: 24, fontWeight: \"bold\" }}>Quiz</p>\r\n            </div>\r\n            <img\r\n              src=\"https://www.iconsdb.com/icons/preview/white/play-xxl.png\"\r\n              alt=\"\"\r\n            />\r\n          </Link>\r\n\r\n          {user && user.id === \"zOOj1gwSb7WQA7dwMBgW2EYJOk52\" ? (\r\n            <Link className=\"singleLinkContainer link link1\" to=\"/Quiz/add\">\r\n              <div>\r\n                <p style={{ fontSize: 24, fontWeight: \"bold\" }}>Admin</p>\r\n              </div>\r\n              <img\r\n                src=\"https://www.iconsdb.com/icons/preview/white/administrator-xxl.png\"\r\n                alt=\"\"\r\n              />{\" \"}\r\n            </Link>\r\n          ) : null}\r\n\r\n          <Link\r\n            className=\"singleLinkContainer link link2 wahniColor\"\r\n            to=\"/Quiz/ranking\"\r\n          >\r\n            <p style={{ paddingLeft: \"25px\", fontWeight: \"bold\" }}>Leader</p>\r\n            <p>board</p>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./rankingScreen.css\";\r\nimport \"../Registration/myAccount.css\";\r\nimport firebase from \"../../firebase\";\r\nimport Loader from \"../../globalComponents/loader\";\r\n\r\nfunction RankingScreen() {\r\n    //Logic Calculation to get Ranking of each types\r\n  const [topScores1, setTopScores1] = useState([]);\r\n  const [mostAttempts1, setMostAttempts1] = useState([]);\r\n  const [highestPercentage1, setHighestPercentage1] = useState([]);\r\n  // set loadings\r\n  const [topScoresLoading, setTopScoresLoading] = useState(true);\r\n  const [mostAttemptsLoading, setMostAttemptsLoading] = useState(true);\r\n  const [highestPercentageLoading, setHighestPercentageLoading] = useState(false);\r\n\r\n//   useEffect(() => {\r\n    \r\n//   }, []);\r\n\r\n  // on useEffect fetch user scores from the backEnd\r\n\r\n  const rankings = [\r\n    {\r\n      userid: \"11111\",\r\n      username: \"AAAAA\",\r\n      scores: [\r\n        {\r\n          submittedAt: 1,\r\n          score: \"5\",\r\n          percentageIncrease: \"25\",\r\n        },\r\n        {\r\n          submittedAt: 2,\r\n          score: \"10\",\r\n          percentageIncrease: \"50\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      userid: \"22222\",\r\n      username: \"BBBBB\",\r\n      scores: [\r\n        {\r\n          submittedAt: 1,\r\n          score: \"45\",\r\n          percentageIncrease: \"56\",\r\n        },\r\n        {\r\n          submittedAt: 2,\r\n          score: \"5\",\r\n          percentageIncrease: \"45\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      userid: \"33333\",\r\n      username: \"CCCCC\",\r\n      scores: [\r\n        {\r\n          submittedAt: 1,\r\n          score: \"23\",\r\n          percentageIncrease: \"45\",\r\n        },\r\n        {\r\n          submittedAt: 2,\r\n          score: \"56\",\r\n          percentageIncrease: \"13\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      userid: \"44444\",\r\n      username: \"DDDDD\",\r\n      scores: [\r\n        {\r\n          submittedAt: 1,\r\n          score: \"55\",\r\n          percentageIncrease: \"12\",\r\n        },\r\n        {\r\n          submittedAt: 2,\r\n          score: \"8\",\r\n          percentageIncrease: \"16\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      userid: \"55555\",\r\n      username: \"EEEEE\",\r\n      scores: [\r\n        {\r\n          submittedAt: 1,\r\n          score: \"63\",\r\n          percentageIncrease: \"32\",\r\n        },\r\n        {\r\n          submittedAt: 2,\r\n          score: \"80\",\r\n          percentageIncrease: \"60\",\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  //all these contribute to UI for the animation effect\r\n  //START\r\n  const [mostAttemptsClicked, setmostAttemptsClicked] = useState(false);\r\n  const [topScorersClicked, settopScorersClicked] = useState(false);\r\n  const [topPerformersCLicked, settopPerformersCLicked] = useState(false);\r\n\r\n  const loginContainer1 = topScorersClicked\r\n    ? \"rankCard rankCardHeight400 wahniBgColor\"\r\n    : \"rankCard rankCardHeight60\";\r\n  const headerContainer1 = topScorersClicked\r\n    ? \"rankHeaderDiv\"\r\n    : \"rankHeaderDiv rankHeaderDivClick wahniColor\";\r\n  const rankTable1 = topScorersClicked ? \"rankTable\" : \"hide-section1\";\r\n\r\n  const loginContainer2 = mostAttemptsClicked\r\n    ? \"rankCard rankCardHeight400 wahniBgColor\"\r\n    : \"rankCard rankCardHeight60\";\r\n  const headerContainer2 = mostAttemptsClicked\r\n    ? \"rankHeaderDiv\"\r\n    : \"rankHeaderDiv rankHeaderDivClick wahniColor\";\r\n  const rankTable2 = mostAttemptsClicked\r\n    ? \"rankTable\"\r\n    : \"rankTable hide-section1\";\r\n\r\n  const loginContainer3 = topPerformersCLicked\r\n    ? \"rankCard rankCardHeight400 wahniBgColor\"\r\n    : \"rankCard rankCardHeight60\";\r\n  const headerContainer3 = topPerformersCLicked\r\n    ? \"rankHeaderDiv\"\r\n    : \"rankHeaderDiv rankHeaderDivClick wahniColor\";\r\n  const rankTable3 = topPerformersCLicked\r\n    ? \"rankTable\"\r\n    : \"rankTable hide-section1\";\r\n\r\n  //Logic Calculation to get Ranking of each types\r\n  const [mostAttempts, setMostAttempts] = useState([]);\r\n  const [highestPercentage, setHighestPercentage] = useState([]);\r\n\r\n  function topScore() {\r\n    if(topScores1.length < 1) {\r\n        setTopScoresLoading(true)\r\n    firebase\r\n      .firestore()\r\n      .collection(\"rankings\")\r\n      .orderBy(\"score\", \"desc\")\r\n      .limit(5)\r\n      .onSnapshot(\r\n        (docData) => {\r\n          const list = [];\r\n          docData.forEach((doc) => {\r\n            list.push({ ...doc.data(), id: doc.id });\r\n          });\r\n          console.log(list);\r\n          setTopScoresLoading(false);\r\n          setTopScores1(list)\r\n        },\r\n        (err) => {\r\n          window.alert(\"Unable to get rankings\", err);\r\n        }\r\n      );\r\n    } else {\r\n        setTopScoresLoading(false)\r\n    }\r\n    \r\n}\r\n\r\n  function mostAttempt() {\r\n    if(mostAttempts1.length < 1) {\r\n        setMostAttemptsLoading(true)\r\n    firebase\r\n      .firestore()\r\n      .collection(\"rankings\")\r\n      .orderBy(\"attempt\", \"desc\")\r\n      .limit(5)\r\n      .onSnapshot(\r\n        (docData) => {\r\n          const list = [];\r\n          docData.forEach((doc) => {\r\n            list.push({ ...doc.data(), id: doc.id });\r\n          });\r\n          console.log(list);\r\n          setMostAttemptsLoading(false);\r\n          setMostAttempts1(list)\r\n        },\r\n        (err) => {\r\n          window.alert(\"Unable to get rankings\", err);\r\n        }\r\n      );\r\n    } else {\r\n        setMostAttemptsLoading(false)\r\n    }\r\n  }\r\n\r\n  function percentageHighest() {\r\n    if(highestPercentage1.length < 1) {\r\n        setHighestPercentageLoading(true)\r\n    firebase\r\n      .firestore()\r\n      .collection(\"rankings\")\r\n      .orderBy(\"perecentageIncrease\", \"desc\")\r\n      .limit(5)\r\n      .onSnapshot(\r\n        (docData) => {\r\n          const list = [];\r\n          docData.forEach((doc) => {\r\n            list.push({ ...doc.data(), id: doc.id });\r\n          });\r\n          console.log(list);\r\n          setHighestPercentageLoading(false);\r\n          setHighestPercentage1(list)\r\n        },\r\n        (err) => {\r\n          window.alert(\"Unable to get rankings\", err);\r\n        }\r\n      );\r\n    } else {\r\n        setHighestPercentageLoading(false)\r\n    }\r\n  }\r\n\r\n  //Click Handlers of each ranking Components\r\n  function handleTopScoreClick(e) {\r\n    settopScorersClicked(true);\r\n    setmostAttemptsClicked(false);\r\n    settopPerformersCLicked(false);\r\n    topScore();\r\n  }\r\n  function handleMostAttemptClick(e) {\r\n    settopScorersClicked(false);\r\n    settopPerformersCLicked(false);\r\n    setmostAttemptsClicked(true);\r\n    mostAttempt();\r\n  }\r\n  function handleTopPerformerClick(e) {\r\n    settopScorersClicked(false);\r\n    settopPerformersCLicked(true);\r\n    setmostAttemptsClicked(false);\r\n    percentageHighest();\r\n  }\r\n\r\n  // if user is logged in we show profile else we show register or login page\r\n\r\n  return (\r\n    <div className=\"body fontMontserrat\">\r\n      <div className={loginContainer1}>\r\n        {/* <div className='form'> */}\r\n        <div className={headerContainer1} onClick={handleTopScoreClick}>\r\n          <p>\r\n            Top <b>Scores</b>\r\n          </p>\r\n        </div>\r\n            \r\n            {topScoresLoading ? \r\n            <div className={rankTable1}>\r\n            <div className='flexCenter'>\r\n            <Loader borderWidth='5px' width='20px' />\r\n            </div>\r\n            </div>\r\n            :\r\n            <div className={rankTable1}>\r\n            {topScores1.map((data, index) => {\r\n                return (\r\n                  <div className=\"singleRankRow\">\r\n                    <div className=\"nameText rankTextStyle\">{data.username}</div>\r\n                    <div className=\"scoreText rankTextStyle\">{data.score}</div>\r\n                  </div>\r\n                );\r\n              })}    \r\n            </div>\r\n            }\r\n          \r\n        </div>\r\n      <div className={loginContainer2}>\r\n        {/* <div className='form'> */}\r\n        <div className={headerContainer2} onClick={handleMostAttemptClick}>\r\n          <p>\r\n            Most <b>Attempts</b>\r\n          </p>\r\n        </div>\r\n        {\r\n            mostAttemptsLoading ? \r\n            <div className={rankTable2}>\r\n            <div className='flexCenter'>\r\n            <Loader borderWidth='5px' width='20px' />\r\n            </div>\r\n            </div>\r\n\r\n            :\r\n\r\n            <div className={rankTable2}>\r\n            {mostAttempts1.map((data, index) => {\r\n                return (\r\n                  <div className=\"singleRankRow\">\r\n                    <div className=\"nameText rankTextStyle\">{data.username}</div>\r\n                    <div className=\"scoreText rankTextStyle\">{data.attempt}</div>\r\n                  </div>\r\n                );\r\n              })}    \r\n            </div>\r\n        }\r\n        {/* </div> */}\r\n      </div>\r\n\r\n      <div className={loginContainer3}>\r\n        {/* <div className='form'> */}\r\n        <div className={headerContainer3} onClick={handleTopPerformerClick}>\r\n          <p>\r\n            Top <b>Performers</b>\r\n          </p>\r\n        </div>\r\n        {\r\n            highestPercentageLoading ? \r\n            <div className={rankTable3}>\r\n            <div className='flexCenter'>\r\n            <Loader borderWidth='5px' width='20px' />\r\n            </div>\r\n            </div>\r\n\r\n            :\r\n\r\n            <div className={rankTable3}>\r\n            {highestPercentage1.map((data, index) => {\r\n                return (\r\n                  <div className=\"singleRankRow\">\r\n                    <div className=\"nameText rankTextStyle\">{data.username}</div>\r\n                    <div className=\"scoreText rankTextStyle\">{data.perecentageIncrease}</div>\r\n                  </div>\r\n                );\r\n              })}    \r\n            </div>\r\n        }\r\n        {/* </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RankingScreen;\r\n","import React, { useContext, useEffect, useCallback, useState } from 'react';\n\n\nexport const QuestionContext = React.createContext({});\n\nconst QuestionProvider = QuestionContext.Provider;\nconst QuestionConsumer = QuestionContext.Consumer;\n\n// function onAuthStateChange(callback) {\n// make sure user register or login\n// }\n\n  // user is added or logged in and sent to all the components of this site through this context\n\n\nexport function QuestionContextProvider(props) {\n\n\n    // on useEffect fetch questions from the backend and save it in 'qs'\n\n    const [qs, setqs] = useState([\n            {\n                questionText: 'What is the capital of France?',\n                answerOptions: [\n                    { answerText: 'New York', isCorrect: false },\n                    { answerText: 'London', isCorrect: false },\n                    { answerText: 'Paris', isCorrect: true },\n                    { answerText: 'Dublin', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'Who is CEO of Tesla?',\n                answerOptions: [\n                    { answerText: 'Jeff Bezos', isCorrect: false },\n                    { answerText: 'Elon Musk', isCorrect: true },\n                    { answerText: 'Bill Gates', isCorrect: false },\n                    { answerText: 'Tony Stark', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'The iPhone was created by which company?',\n                answerOptions: [\n                    { answerText: 'Apple', isCorrect: true },\n                    { answerText: 'Intel', isCorrect: false },\n                    { answerText: 'Amazon', isCorrect: false },\n                    { answerText: 'Microsoft', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'How many Harry Potter books are there?',\n                answerOptions: [\n                    { answerText: '1', isCorrect: false },\n                    { answerText: '4', isCorrect: false },\n                    { answerText: '6', isCorrect: false },\n                    { answerText: '7', isCorrect: true },\n                ],\n            },\n            {\n                questionText: 'How many Harry Potter books are there?',\n                answerOptions: [\n                    { answerText: '1', isCorrect: false },\n                    { answerText: '4', isCorrect: false },\n                    { answerText: '6', isCorrect: false },\n                    { answerText: '7', isCorrect: true },\n                ],\n            },\n            {\n                questionText: 'What is the capital of France?',\n                answerOptions: [\n                    { answerText: 'New York', isCorrect: false },\n                    { answerText: 'London', isCorrect: false },\n                    { answerText: 'Paris', isCorrect: true },\n                    { answerText: 'Dublin', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'Who is CEO of Tesla?',\n                answerOptions: [\n                    { answerText: 'Jeff Bezos', isCorrect: false },\n                    { answerText: 'Elon Musk', isCorrect: true },\n                    { answerText: 'Bill Gates', isCorrect: false },\n                    { answerText: 'Tony Stark', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'The iPhone was created by which company?',\n                answerOptions: [\n                    { answerText: 'Apple', isCorrect: true },\n                    { answerText: 'Intel', isCorrect: false },\n                    { answerText: 'Amazon', isCorrect: false },\n                    { answerText: 'Microsoft', isCorrect: false },\n                ],\n            },\n            {\n                questionText: 'How many Harry Potter books are there?',\n                answerOptions: [\n                    { answerText: '1', isCorrect: false },\n                    { answerText: '4', isCorrect: false },\n                    { answerText: '6', isCorrect: false },\n                    { answerText: '7', isCorrect: true },\n                ],\n            },\n    ])\n  \n  return (\n    <QuestionProvider value={[qs, setqs]}>\n    {props.children}      \n    </QuestionProvider>\n  );\n}\n\n","import React, { useContext, useEffect, useCallback, useState } from 'react';\nimport firebase from '../../firebase'\n\n\nexport const AdminQuestionContext = React.createContext({});\n\nconst AdminQuestionProvider = AdminQuestionContext.Provider;\nconst AdminQuestionConsumer = AdminQuestionContext.Consumer;\n\n// function onAuthStateChange(callback) {\n// make sure user register or login\n// }\n\n  // user is added or logged in and sent to all the components of this site through this context\n\n\nexport function AdminQuestionContextProvider(props) {\n\n    \n\n    // on useEffect fetch questions from the backend and save it in 'qs'\n\n    const [allQs, setAllQs] = useState([])\n\n    useEffect(() => {\n        firebase.firestore()\n        .collection('questions')\n        .orderBy('createdAt', 'desc')\n        .limit(5)\n        .onSnapshot((thisisquery) => {\n          const list = [];\n          thisisquery.forEach((doc) => {\n            list.push({ ...doc.data(), id: doc.id });\n          })\n          setAllQs(list);\n          // console.log(list)\n        })\n      }, []);\n  \n  return (\n    <AdminQuestionProvider value={[allQs, setAllQs]}>\n    {props.children}\n    </AdminQuestionProvider>\n  );\n}\n\n","import React, {useState, useContext, useEffect } from 'react';\nimport './questionScreen.css'\nimport firebase from '../../firebase'\nimport QuestionCardGlobal from '../../globalComponents/questionCardGlobal';\nimport Loader from '../../globalComponents/loader';\n\nfunction ShowQ(props) {\n\n    const { allQs, setAllQs } = props;\n    const [correctAnswers, setCorrectAnswers] = useState([]);\n    // const [newQs, setnewQs] = useState(AllQs)\n    const [answerIsLoading, setanswerIsLoading] = useState(false)\n    \n    function getAnswer(id ,index) {\n      setanswerIsLoading(true)\n      if(correctAnswers[index]) {\n        console.log('not fetching');\n        setanswerIsLoading(false)\n      } else {\n        firebase\n      .firestore()\n      .doc(`answers/${id}`)\n      .get().then((docData => {\n        const answersingle = docData.data().answer;\n        const list = correctAnswers;\n        list[index] = answersingle;\n        // list[index] = answersingle;\n        setCorrectAnswers(list);\n        console.log(list)\n        setanswerIsLoading(false)\n\n\n        // const list = [];\n        // documentSnapshots.forEach((doc) => {\n        //   list.push({ ...doc.data(), id: doc.id });\n        // })\n        // // setCorrectAnswers(prevCorrectAnswer => [...prevFullnotes, ...list]);\n        // setAllQs(prevCorrectAnswer => [...prevCorrectAnswer.slice(0,index), {...prevCorrectAnswer[index], 'answer': list[0].answer}, ...prevCorrectAnswer.slice(index+1,3)]);\n      }))\n      .catch(err => {\n        window.alert('Unable to get Answer')\n        setanswerIsLoading(false)\n      });\n      }\n    }\n\n    function deleteQuestion(id) {\n      firebase\n      .firestore()\n      .doc(`questions/${id}`)\n      .delete()\n      .then(res => console.log('question deleted'))\n      .catch(err => console.log(err));\n      firebase\n      .firestore()\n      .doc(`answers/${id}`)\n      .delete()\n      .then(res => console.log('answer deleted'))\n      .catch(err => console.log(err));\n      setCorrectAnswers([])\n    }\n\n    \n  const colorConst = (iscorrect) => {\n      if(iscorrect) {\n          return 'green'\n      } else {\n          return 'black'\n      }\n  }\n  const fontWeightConst = (iscorrect) => {\n    if(iscorrect) {\n        return 'bold'\n    } else {\n        return 'normal'\n    }\n}\n\n\nconst idNameBasedOnAnswer = (option, answer) => {\n  if (option === answer) {\n      return 'answerButton2'\n  } else {\n      return 'answerButton1'\n  }\n}\n\n    function QuestionsView() {\n        return (\n          <div className='questonsSubMainDiv'>\n            {allQs ? (\n              allQs.map((q, i) => (\n                // <div className='insideQuestionsView'>\n                //   {/* <p>Question:</p> */}\n                //     <p style={{fontWeight: 'bold'}}>Q : {q.questionText}</p>\n                //     <AnswersView answers={q.options} />\n                //     The Answer is {q.answer}\n                //     <button onClick={() => getAnswer(q.id, i)}>show answer</button>\n                // </div>\n                // <QuestionCardGlobal clickToSeeAnswer={getAnswer} question={q} answer={q.answer} index={i} />\n                <div className='questionDiv1'>\n                <div className=\"flexContainFull fontMontserrat\">\n        <div>\n\n          <div className=\"questionHeadText1\">Question\n          <img onClick={() => deleteQuestion(q.id)} src='https://www.iconsdb.com/icons/preview/white/delete-xxl.png' />\n          </div>\n        </div>\n\n        <div className=\"question-and-answer-section1\">\n          <div className=\"question-text1\">\n            {q.questionText}\n          </div>\n\n          <div className=\"answer-section1 wahniColor\">\n            {q.options.map((option) => (\n              <div\n                className=\"buttonOne\"\n                id={idNameBasedOnAnswer(option, correctAnswers[i])}\n              >\n                {option}\n              </div>\n            ))}\n            {\n              answerIsLoading ? \n              <div\n                  className=\"buttonOne flexCenter\"\n                  id='loadingButton1'\n                >\n                  <Loader width='15px' borderWidth='5px'/>\n                </div>\n              :\n              <div>\n              {\n                correctAnswers[i] ? \n                <div\n                  className=\"buttonOne showAnswerButton\"\n                  id='answerButton1'\n                >\n                  Answer is {correctAnswers[i]}\n                </div>\n                :\n                <div\n                  className=\"buttonOne showAnswerButton\"\n                  id='answerButton1'\n                  onClick={() => getAnswer(q.id, i)}\n                >\n                  Click to See Answer {correctAnswers[i]}\n                </div>\n              }\n              </div>\n            }\n              \n          </div>\n          \n        </div>\n\n      </div>\n            </div>\n              ))\n            ) : (\n              <div></div>\n            )}\n          </div>\n        );\n}\n\n\n    return (\n        <div className='questionsView'>\n        <QuestionsView />\n        <hr />\n        </div>\n        \n    )\n\n}\n\nexport default ShowQ;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { UserContext } from \"../context/user1Context\";\nimport { QuestionContext } from \"../context/questionsContext\";\nimport { AdminQuestionContext } from \"../context/adminQcontext\";\n\nimport ShowQ from \"./showQuestions\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport firebase from '../../firebase'\n\nimport \"./questionScreen.css\";\n\nfunction AddDel() {\n// user details and scores\n  const userContextObject = useContext(UserContext);\n  const user = userContextObject.user;\n\n  const [allQs, setAllQs] = useContext(AdminQuestionContext);\n\n\n  function handleFormSubmit1(values) {\n    const correctAnswer = (correctoption) => {\n      if (correctoption === 'A') {\n        return values.optionA\n      }\n      if (correctoption === 'B') {\n        return values.optionB\n      }\n      if (correctoption === 'C') {\n        return values.optionC\n      }\n      if (correctoption === 'D') {\n        return values.optionD\n      }\n    };\n    \n    if (allQs.length > 0) {\n      console.log(`new index added ${allQs[0].index + 1}`)\n      const newQ = {\n        questionText: `${values.questionInput}`,\n        options: [\n          `${values.optionA}`,\n          `${values.optionB}`,\n          `${values.optionC}`,\n          `${values.optionD}`\n        ],\n        index: allQs[0].index + 1\n      };\n  \n      addNewQ(newQ, correctAnswer(values.correct))\n    } else {\n      const newQ = {\n        questionText: `${values.questionInput}`,\n        options: [\n          `${values.optionA}`,\n          `${values.optionB}`,\n          `${values.optionC}`,\n          `${values.optionD}`\n        ],\n        index: 1\n      };\n  \n      addNewQ(newQ, correctAnswer(values.correct))\n    }\n}\n\nfunction addNewQ(newQobject, answer) {\n  firebase\n    .firestore()\n    .collection('questions')\n    .add({\n      ...newQobject,\n      createdAt: new Date()\n    })\n    .then(res => {\n      console.log('question added with id:', res.id);\n      firebase\n      .firestore()\n      .doc(`answers/${res.id}`)\n      .set({\n        'answer': answer,\n        'questionId': res.id,\n        'createdAt': new Date()\n      })\n      .then(res1 => {\n        console.log('answer added')\n      })\n      .catch(err => {\n        window.alert('Unable to add answer')\n\n      })\n    })\n    .catch(err => {\n      window.alert('Unable to add question')\n    });\n}\n\n    \n\n  if (!user) return <Redirect to=\"/myAccount\" />;\n\n  if (user.id !== \"zOOj1gwSb7WQA7dwMBgW2EYJOk52\") {\n    return <h1>You are not AUTHORIZED</h1>;\n  } else {\n    return (\n      <div className='AdminAppContainer'>\n\n        <div className='questionsMainDiv'>\n            <ShowQ allQs={allQs} setAllQs={setAllQs} />\n        </div>\n\n        <div className=\"formDiv\">\n        <p className='formHeader'>ADD QUESTIONS</p>\n          <Formik\n            initialValues={{\n              questionInput: \"\",\n              optionA: \"\",\n              optionB: \"\",\n              optionC: \"\",\n              optionD: \"\",\n              correct: \"\",\n            }}\n            onSubmit={(values) => handleFormSubmit1(values)}\n            validationSchema={Yup.object().shape({\n              questionInput: Yup.string().required(\"*this is a required field\"),\n              optionA: Yup.string().required(\"*this is a required field\"),\n              optionB: Yup.string().required(\"*this is a required field\"),\n              optionC: Yup.string().required(\"*this is a required field\"),\n              optionD: Yup.string().required(\"*this is a required field\"),\n              correct: Yup.string().required(\"*choose one option\").min(1),\n            })}\n          >\n            {(props) => {\n              const {\n                values,\n                touched,\n                errors,\n                dirty,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                handleReset,\n              } = props;\n              return (\n                <form onSubmit={handleSubmit}>\n                  \n                  <input\n                    id=\"questionInput\"\n                    placeholder=\"Enter the Question\"\n                    type=\"text\"\n                    value={values.questionInput}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    className={\n                      errors.questionInput && touched.questionInput\n                        ? \"text-input error\"\n                        : \"text-input\"\n                    }\n                  />\n                  {errors.questionInput && touched.questionInput && (\n                    <div className=\"input-feedback\">{errors.questionInput}</div>\n                  )}\n\n                  <label htmlFor=\"optionA\" className='labelHeader'>\n                    Option A\n                  </label>\n                  <input\n                    id=\"optionA\"\n                    placeholder=\"Enter option\"\n                    type=\"text\"\n                    value={values.optionA}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    // className={\n                    //   errors.email && touched.email\n                    //     ? \"text-input error\"\n                    //     : \"text-input\"\n                    // }\n                  />\n                  {errors.optionA && touched.optionA && (\n                    <div className=\"input-feedback\">{errors.optionA}</div>\n                  )}\n                  <label htmlFor=\"optionB\" className='labelHeader'>\n                    Option B\n                  </label>\n                  <input\n                    id=\"optionB\"\n                    placeholder=\"Enter Option\"\n                    type=\"text\"\n                    value={values.optionB}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    // className={\n                    //   errors.email && touched.email\n                    //     ? \"text-input error\"\n                    //     : \"text-input\"\n                    // }\n                  />\n                  {errors.optionB && touched.optionB && (\n                    <div className=\"input-feedback\">{errors.optionB}</div>\n                  )}\n                  <label htmlFor=\"optionC\" className='labelHeader'>\n                    Option C\n                  </label>\n                  <input\n                    id=\"optionC\"\n                    placeholder=\"Enter option\"\n                    type=\"text\"\n                    value={values.optionC}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    // className={\n                    //   errors.email && touched.email\n                    //     ? \"text-input error\"\n                    //     : \"text-input\"\n                    // }\n                  />\n                  {errors.optionC && touched.optionC && (\n                    <div className=\"input-feedback\">{errors.optionC}</div>\n                  )}\n                  <label htmlFor=\"optionD\" className='labelHeader'>\n                    Option D\n                  </label>\n                  <input\n                    id=\"optionD\"\n                    placeholder=\"Enter Option\"\n                    type=\"text\"\n                    value={values.optionD}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    // className={\n                    //   errors.email && touched.email\n                    //     ? \"text-input error\"\n                    //     : \"text-input\"\n                    // }\n                  />\n                  {errors.optionD && touched.optionD && (\n                    <div className=\"input-feedback\">{errors.optionD}</div>\n                  )}\n\n                  <select\n                    name=\"correct\"\n                    value={values.correct}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    style={{ display: \"block\" }}\n                    className='selector'\n                  >\n                    <option value=\"\" label=\"Choose the Right option\" />\n                    <option value=\"A\" label=\"A\" />\n                    <option value=\"B\" label=\"B\" />\n                    <option value=\"C\" label=\"C\" />\n                    <option value=\"D\" label=\"D\" />\n                  </select>\n                  {errors.correct && touched.correct && (\n                    <div className=\"input-feedback\">{errors.correct}</div>\n                  )}\n\n                  <button type=\"submit\" className='submitButton1'>Submit</button>\n\n                  {/* <DisplayFormikState {...props} /> */}\n                </form>\n              );\n            }}\n          </Formik>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AddDel;\n","export default __webpack_public_path__ + \"static/media/wg.5034db2c.png\";","import React from 'react';\nimport './footer.css';\nimport logo from '../../assets/wg.png'\n\nfunction Footer() {\n    return (\n      \n      <div className='footerDiv'>\n          <div className='footerContain1'>\n          <img src={logo} className=\"footerLogo\" alt=\"logo\" />\n          </div>\n          <div className='footerContain2 wahniColor'>\n            <p id='fontResponsive'>\n                പരാതികൾ complaints@wahni.com\n                <br /><br />\n                എല്ലാവർക്കും ഉപകാരപ്പെടുന്നതരത്തിൽ ഉള്ള പൊതുവായ ചോദ്യങ്ങൾ http:/ask.wahni.com -ഇൽ ചോദിക്കുന്നതായിരിക്കും കൂടുതൽ നന്നാവുക\n            </p>\n          </div>\n      </div>\n  \n    );\n  }\n  \n  export default Footer;\n  ","import MyAccount from './components/Registration/myAccount'\nimport { BrowserRouter, Switch, Route, HashRouter } from 'react-router-dom';\nimport Navbar from './components/Layout/navbar'\nimport Home from './components/home'\nimport QuizPlay from './components/Quiz/quizPlay'\nimport Quiz from './components/Quiz/quizScreen'\nimport RankingScreen from './components/Ranking/rankingScreen'\nimport { UserContextProvider } from './components/context/user1Context';\nimport { QuestionContextProvider } from './components/context/questionsContext';\nimport { AdminQuestionContextProvider } from './components/context/adminQcontext'\nimport AddDel from './components/questionsScreen/addDelQs'\nimport './components/styles/globalStyles.css'\nimport Footer from './components/footer/footer'\n\n\n\n\nfunction App() {\n  return (\n    \n    <HashRouter>\n      <Navbar />\n      <Switch>\n      <UserContextProvider>\n        <Route exact path='/' component={Home} />\n          <Route exact path='/myAccount' component={MyAccount} />\n          <Route exact path='/Quiz' component={Quiz} />\n\n          <QuestionContextProvider>\n          <Route exact path='/Quiz/play' component={QuizPlay} />\n\n          <AdminQuestionContextProvider>\n          <Route exact path='/Quiz/add' component={AddDel} />\n          </AdminQuestionContextProvider>\n          \n          </QuestionContextProvider>\n\n          <Route exact path='/Quiz/ranking' component={RankingScreen} />\n        </UserContextProvider>\n      </Switch>\n      <Footer />\n    </HashRouter>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}